package kieker.live.demo;

import kieker.live.demo.KiekerLiveDemoUI;

import com.vaadin.event.MouseEvents;
import com.vaadin.event.MouseEvents.ClickEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.CustomLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

public class MainView extends Panel implements View {

	private static final long serialVersionUID = -2729802936884562140L;

	public MainView() {
		CustomLayout layout = new CustomLayout("layout");
		setContent(layout);
		
		final VerticalLayout topLayout = new VerticalLayout();
		
		final VerticalLayout middleLeftLayout = new VerticalLayout();
		final VerticalLayout middleRightLayout = new VerticalLayout();
		final HorizontalLayout middleLayout = new HorizontalLayout(middleLeftLayout, middleRightLayout);
		
		final VerticalLayout bottomLeftLayout = new VerticalLayout();
		final VerticalLayout bottomRightLayout = new VerticalLayout();
		final HorizontalLayout bottomLayout = new HorizontalLayout(bottomLeftLayout, bottomRightLayout);

		// Create the embedded images
		final Image imgJPetStore = new Image(null, new ThemeResource("img/petstore.png"));
		final Image imgRecordList = new Image(null, new ThemeResource("img/recordList.png"));
		final Image imgMethodResponseTimes = new Image(null, new ThemeResource("img/methodResponseTimes.png"));
		final Image imgSystemModel = new Image(null, new ThemeResource("img/systemModel.png"));
		final Image imgCPUMemSwap = new Image(null, new ThemeResource("img/cpuMemSwap.png"));

		// A little bit style for the images
		imgJPetStore.addStyleName("embedded");
		imgRecordList.addStyleName("embedded");
		imgMethodResponseTimes.addStyleName("embedded");
		imgSystemModel.addStyleName("embedded");
		imgCPUMemSwap.addStyleName("embedded");

		imgRecordList.addClickListener(new MouseEvents.ClickListener() {

			private static final long serialVersionUID = -9070082253323241075L;

			@Override
			public void click(final ClickEvent event) {
				KiekerLiveDemoUI.navigateToRecordList();
			}
		});
		
		imgMethodResponseTimes.addClickListener(new MouseEvents.ClickListener() {

			private static final long serialVersionUID = 4309933761220689655L;

			@Override
			public void click(final ClickEvent event) {
				KiekerLiveDemoUI.navigateToMethodResponsetime();
			}
		});


		// Add the images and the text to the layout
		topLayout.addComponent(imgJPetStore);
		Label topLabel = new Label("<p><strong><a href='/jpetstore' target='_blank'>JPETSTORE</a>"
				+ "</strong> provides an exemplary online shop that has been instrumented with "
				+ "<strong>Kieker</strong> for the analyses presented in this demo.</p>");
		topLabel.setContentMode(ContentMode.HTML);
		topLabel.addStyleName("p");
		topLayout.addComponent(topLabel);
		
		middleLeftLayout.addComponent(imgRecordList);
		Label middleLeftLabel = new Label("<strong><a href='#!recordList'>RECORD LIST</a></strong>"
				+ " shows the session id, the trace id, a part of the method signature and the method "
				+ "response time of the last 100 called methods of the JPetStore. There is a freeze "
				+ "button to stop updating the site, so that you can look at the details. A mouseover "
				+ "on trace id shows the whole record which is generated by Kieker and a mouseover on "
				+ "signature shows the whole method signature.");
		middleLeftLabel.setContentMode(ContentMode.HTML);
		middleLeftLabel.addStyleName("p");
		middleLeftLayout.addComponent(middleLeftLabel);
		
		middleRightLayout.addComponent(imgMethodResponseTimes);
		Label middleRightLabel = new Label("<strong><a href='#!methodResponsetime'>METHOD RESPONSE TIMES"
				+ "</a></strong> shows a line chart with the number of method calls and a bar chart with"
				+ " the response times of these methods.");
		middleRightLabel.setContentMode(ContentMode.HTML);
		middleRightLabel.addStyleName("p");
		middleRightLayout.addComponent(middleRightLabel);

		bottomLeftLayout.addComponent(imgSystemModel);
		Label bottomLeftLabel = new Label("<strong><a href='#!main'>SYSTEM MODEL</a></strong> shows the "
				+ "runtime collected components, operations, etc of the JPetStore.");
		bottomLeftLabel.setContentMode(ContentMode.HTML);
		bottomLeftLabel.addStyleName("p");
		bottomLeftLayout.addComponent(bottomLeftLabel);
		
		bottomRightLayout.addComponent(imgCPUMemSwap);
		Label bottomRightLabel = new Label("<strong><a href='#!main'>CPU AND MEMSWAP</a></strong> shows the"
				+ " CPU and memory utilization of the available cores.");
		bottomRightLabel.setContentMode(ContentMode.HTML);
		bottomRightLabel.addStyleName("p");
		bottomRightLabel.setSizeFull();
		bottomRightLayout.addComponent(bottomRightLabel);

		topLayout.setSizeFull();
		middleLayout.setSizeFull();
		middleLeftLayout.setSizeFull();
		middleRightLayout.setSizeFull();
		bottomLayout.setSizeFull();

		topLayout.addStyleName("centered");
		middleLeftLayout.addStyleName("centered");
		middleRightLayout.addStyleName("centered");
		bottomLeftLayout.addStyleName("centered");
		bottomRightLayout.addStyleName("centered");
		bottomLayout.addStyleName("centered");

		final VerticalLayout vLayout = new VerticalLayout(topLayout, middleLayout, bottomLayout);
		vLayout.setSizeFull();
		layout.addComponent(vLayout, "main");
	}

	@Override
	public void enter(final ViewChangeEvent event) {}

}
