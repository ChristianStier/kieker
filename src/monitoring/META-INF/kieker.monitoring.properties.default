## In order to use a custom Kieker.Monitoring configuration, create a copy of 
## this file and modify it according to your needs. 
##
## The location of the file is passed to Kieker.Monitoring via the JVM parameter
## kieker.monitoring.configuration. For example, with a configuration file named 
## my.kieker.monitoring.properties in the folder META-INF you would pass this location 
## to the JVM when starting your application:
##
##  java -Dkieker.monitoring.configuration=META-INF/my.kieker.monitoring.properties [...]
##
## If no configuration file is passed, Kieker tries to use a configuration file in
## META-INF/kieker.monitoring.properties
## If this also fails, a default configuration is being used according to the values in 
## this default file.

# The name of the Kieker instance.
kieker.monitoring.name=KIEKER

# The name of the VM running Kieker. If empty the name will be determined 
# automatically, else it will be set to the given value.
kieker.monitoring.hostname=

# The initial ID associated with all experiments.
kieker.monitoring.initialExperimentId=1

# Whether the MonitoringController will be available as an MBean.
kieker.monitoring.MBean=false

# These two properties are only evaluated if the MBean is activated.
# They define the ObjectName used to access the MBean (usually you
# don't have to change them).
kieker.monitoring.MBean.domain=kieker.monitoring
kieker.monitoring.MBean.name=MonitoringController

# Whether Kieker runs in replay or realtime mode.
# You usually don't want to change this value.
kieker.monitoring.replayMode=false

# Enable/disable monitoring after startup (true|false; default: true)
# If monitoring is disabled, the MonitoringController simply pauses.
# Furthermore, probes should stop collecting new data and monitoring 
# writers stop should stop writing existing data.
kieker.monitoring.enabled=true

# The Timer used by Kieker. You usually don't want to change the value.
kieker.monitoring.timer=kieker.monitoring.timer.DefaultSystemTimer
# You can specify additional parameters send to the Timer, e.g.
#kieker.monitoring.timer.DefaultSystemTimer.KEY=VALUE

# The size of the thread pool used to execute registered periodic sensor jobs.
kieker.monitoring.periodicSensorsExecutorPoolSize=1

# Enables/disable the automatic assignment of each record's logging timestamp 
# (true|false; default: true) 
kieker.monitoring.setLoggingTimestamp=true

###########################
#######    WRITER   #######
###########################
## Selection of monitoring data writer (classname)
## The value must be a fully-qualified classname of a class implementing 
## kieker.monitoring.IMonitoringWriter and providing a constructor that 
## accepts an IMonitoringController and a single Configuration. 
kieker.monitoring.writer=kieker.monitoring.writer.filesystem.AsyncFsWriter

#####
#kieker.monitoring.writer=kieker.monitoring.writer.DummyWriter
#
## Configuration Properties of the DummyWriter
kieker.monitoring.writer.DummyWriter.key=value


#####
#kieker.monitoring.writer=kieker.monitoring.writer.filesystem.SyncFsWriter
#
## In order to use the default temporary directory, set the property value of
## storeInJavaIoTmpdir to true.
kieker.monitoring.writer.filesystem.SyncFsWriter.storeInJavaIoTmpdir=true
#
## In order to use a custom directory, set storeInJavaIoTmpdir=false
## and set customStoragePath as desired. Examples:
## /var/kieker or "C:\KiekerData" (ensure the folder exists).
kieker.monitoring.writer.filesystem.SyncFsWriter.customStoragePath=


#####
#kieker.monitoring.writer=kieker.monitoring.writer.filesystem.AsyncFsWriter
#
## In order to use the default temporary directory, set the property value of
## storeInJavaIoTmpdir to true.
kieker.monitoring.writer.filesystem.AsyncFsWriter.storeInJavaIoTmpdir=true
#
## In order to use a custom directory, set storeInJavaIoTmpdir=false
## and set customStoragePath as desired. Examples:
## /var/kieker or "C:\KiekerData" (ensure the folder exists).
kieker.monitoring.writer.filesystem.AsyncFsWriter.customStoragePath=
#
## Asynchronous writers need to store monitoring records in an internal buffer.
## This parameter defines its capacity in terms of the number of records. 
kieker.monitoring.writer.filesystem.AsyncFsWriter.QueueSize=10000
#
## Behavior of the asynchronous writer when the internal queue is full:
## 0: terminate Monitoring with an error (default)
## 1: writer blocks until queue capacity is available
## 2: writer discards new records until space is available
##  Be careful when using the value '1' since then, the asynchronous writer
##  is no longer decoupled from the monitored application.
kieker.monitoring.writer.filesystem.AsyncFsWriter.QueueFullBehavior=0


#####
#kieker.monitoring.writer=kieker.monitoring.writer.namedRecordPipe.PipeWriter
#
## The name of the pipe used (must not be empty).
kieker.monitoring.writer.namedRecordPipe.PipeWriter.pipeName=kieker-pipe


#####
#kieker.monitoring.writer=kieker.monitoring.writer.jms.AsyncJMSWriter
#
## The url of the jndi provider that knows the jms service
kieker.monitoring.writer.jms.AsyncJMSWriter.ProviderUrl=tcp://127.0.0.1:3035/
#
## The topic at the jms server which is used in the publisher/subscribe communication.
kieker.monitoring.writer.jms.AsyncJMSWriter.Topic=queue1
#
## The type of the jms factory implementation, e.g.
## "org.exolab.jms.jndi.InitialContextFactory" for openjms 0.7.7
kieker.monitoring.writer.jms.AsyncJMSWriter.ContextFactoryType=org.exolab.jms.jndi.InitialContextFactory
#
## The service name for the jms connection factory.
kieker.monitoring.writer.jms.AsyncJMSWriter.FactoryLookupName=ConnectionFactory
#
## The time that a jms message will be kept alive at the jms server before 
## it is automatically deleted.
kieker.monitoring.writer.jms.AsyncJMSWriter.MessageTimeToLive=10000
#
## Asynchronous writers need to store monitoring records in an internal buffer.
## This parameter defines its capacity in terms of the number of records. 
kieker.monitoring.writer.jms.AsyncJMSWriter.QueueSize=10000
#
## Behavior of the asynchronous writer when the internal queue is full:
## 0: terminate Monitoring with an error (default)
## 1: writer blocks until queue capacity is available
## 2: writer discards new records until space is available
##  Be careful when using the value '1' since then, the asynchronous writer
##  is no longer decoupled from the monitored application.
kieker.monitoring.writer.jms.AsyncJMSWriter.QueueFullBehavior=0


#####
#kieker.monitoring.writer=kieker.monitoring.writer.database.SyncDbWriter
#
## Database driver classname
## Examples: MySQL -> com.mysql.jdbc.Driver
kieker.monitoring.writer.database.SyncDbWriter.DriverClassname=com.mysql.jdbc.Driver
#
## Connection string
## Examples:
##   MySQL:   jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
##   DerbyDB: jdbc:derby:DBNAME;user=DBUSER;password=DBPASS
kieker.monitoring.writer.database.SyncDbWriter.ConnectionString=jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
#
## Name of the database table 
## (can be generated using the file table-for-monitoring.sql)
kieker.monitoring.writer.database.SyncDbWriter.TableName=kiekerdata


#####
#kieker.monitoring.writer=kieker.monitoring.writer.database.AsyncDbWriter
#
## Database driver classname
## Examples: MySQL -> com.mysql.jdbc.Driver
kieker.monitoring.writer.database.AsyncDbWriter.DriverClassname=com.mysql.jdbc.Driver
#
## Connection string
## Examples:
##   MySQL:   jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
##   DerbyDB: jdbc:derby:DBNAME;user=DBUSER;password=DBPASS
kieker.monitoring.writer.database.AsyncDbWriter.ConnectionString=jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
#
## Name of the database table 
## (can be generated using the file table-for-monitoring.sql)
kieker.monitoring.writer.database.AsyncDbWriter.TableName=kiekerdata
#
## The number of concurrent Database connections.
kieker.monitoring.writer.database.AsyncDbWriter.numberOfConnections=4
#
## Load the initialExperimentId from the DB and increase it by 1
## instead of using the value from the configuration.
## (Currently not implemented!) 
kieker.monitoring.writer.database.AsyncDbWriter.loadInitialExperimentId=false
