# A comment line starts with #, a pattern line starts with + or -, an empty line will be ignored
# and any other line produces a warning but does not affect the execution.
# + PATTERN , includes the probes matching the given pattern 'PATTERN'
# - PATTERN , excludes the probes matching the given pattern 'PATTERN'

# Pattern syntax used for adaptive monitoring:
#
# PATTERN = MODIFIER_CONSTRAINT_LIST RETURN_TYPE WS FQ_TYPE "." METHOD_NAME [WS] "(" [WS] [PARAM_LIST] [WS] ")" [WS]
# WS = any whitespace
# MODIFIER_CONSTRAINT_LIST = (("public" | "private" | "package" | "protected")WS)?(("static" | "non_static")WS)?(("native" | "non_native")WS)?
# RETURN_TYPE = FQ_TYPE | "new"
# FQ_TYPE = [FQ_PACKAGE "."] IDENTIFIER
# FQ_PACKAGE = [".."] [IDENTIFER ("." ["."] IDENTIFIER)* [".."]]
# IDENTIFIER = (alpha|"*")(alpha|num|"*")*
# PARAM_LIST = (".." | FQ_TYPE) ([WS] "," [WS] (".." | FQ_TYPE))*
# METHOD_NAME = IDENTIFIER
#
# Hints: Use 'new' as RETURN_TYPE to hit constructors, '*' in IDENTIFIER to hit any number of JavaIdentifiers, 
# '..' in FQ_TYPE to hit any nested packages and '..' in PARAM_LIST to hit anything.

# Examples:
# + *
# Includes everything, special case, not conform with syntax
# Is a default on the top of the list.
# So it's not necessary here.
# + ..* ..*.*(..)
# Includes everything too, but now in correct pattern syntax
# - public java.util.List package.subpackage.AnyClass.any*()
# Excludes all public methods in package.subpackage.AnyClass that start with any, have no parameters and its return type is java.util.List.
# + non_static non-native ..* ..*.*(..)
# Includes all methods that are not static and not native.
# - ..* ..*.*(..String, .. , int)
# Excludes all methods with two or more parameters where the first parameter is a string and the last is an int.

# A probe can match multiple patterns. The comparison begins with the last pattern, and ends with the first hit, whether include or exclude.

# This message will self-destruct when you are using the update mechanism.