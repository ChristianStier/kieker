dependencies {
	compile project(':kieker-common')
	compile project(':kieker-analysis')
	compile project(':kieker-monitoring')
		
	compile resolveLibrary('commons-cli-*.jar')
	compile resolveLibrary('jgraphx-*.jar')
	compile resolveLibrary('commons-math3-*.jar')
	compile resolveLibrary('commons-lang3-*.jar')
	compile resolveLibrary('Rsession-*.jar')
	compile resolveLibrary('Rserve-*.jar')
	compile resolveLibrary('REngine-*.jar')
	compile resolveLibrary('reflections-*.jar')
	compile resolveLibrary('activemq-core-*.jar')
	
	// Some dependencies for the HTTP connector of the KDB
	compile fileTree(dir: rootProject.file('examples/JavaEEServletContainerExample/jetty/lib'), include: 'jetty-*.jar')
	
	// This is a workaround allowing the Kieker tests to depend on each other. I do not recommend to do this.
	testCompile project(':kieker-common').sourceSets.test.output
	testCompile project(':kieker-analysis').sourceSets.test.output
	testCompile project(':kieker-monitoring').sourceSets.test.output

	testRuntime resolveLibrary('derby-*.jar')
	testRuntime resolveLibrary('geronimo-j2ee-management_1.1_spec-*.jar')
	testRuntime resolveLibrary('kahadb-*.jar')
}

task generateRecords(type: JavaExec) {
	classpath = fileTree('../bin/dev') {
		include 'target/de.cau.cs.se.instrumentation.rl.cli-*.jar'
		include 'lib/org.eclipse.emf.mwe.core_*.jar'
		include 'lib/org.eclipse.xtext.common.types_*.jar'
		include 'lib/org.eclipse.emf.mwe.utils_*.jar'
		include 'lib/org.eclipse.xtext.common.types.ui_*.jar'
	}				
	main = 'de.cau.cs.se.instrumentation.rl.cli.CLICompilerMain'
	args '-r', '..', '-a', 'Kieker Build', '-d', 'src-gen', '-s', 'model/records', '-l', 'java', '-n', 'kieker-tools', '-p', 'kieker-tools', '-v', '1.10'	
}