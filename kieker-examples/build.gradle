defaultTasks 'cleanStandaloneExamples', 'buildStandaloneExamples'

task buildStandaloneExamples(dependsOn: [
					 'replaceHardCodedVersionNames',
					 'buildStandaloneExamplesUserguideCh2App', 
					 'buildStandaloneExamplesUserguideCh2Instr', 
					 'buildStandaloneExamplesUserguideCh34',
					 'buildStandaloneExamplesUserguideCh5',
					 'buildStandaloneExamplesUserguideAppendixSigar',
					 'buildStandaloneExamplesUserguideAppendixJMS', 
					 'buildStandaloneExamplesMonitoringSigar',
					 'buildStandaloneExamplesMonitoringJVM',
					 'buildStandaloneExamplesMonitoringSpring',
					 'buildStandaloneExamplesMonitoringManual',
					 'buildStandaloneExamplesMonitoringAspectJ',
					 'buildStandaloneExamplesMonitoringAdaptive',
					 'buildStandaloneExamplesMonitoringTimesource',
					 'buildStandaloneExamplesAnalysisKax',
					 'buildStandaloneExamplesAnalysisOpad',
					 'buildStandaloneExamplesUserguideAppendixJavaEE', 
					 'replaceAbsoluteByRelativePathsEclipse']) {
}

task replaceHardCodedVersionNames() << {
	regexpReplaceInFiles(project.file("monitoring/custom-timesource/build.gradle"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("monitoring/probe-aspectj/build.gradle"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("monitoring/adaptive-monitoring/build.gradle"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("OverheadEvaluationMicrobenchmark/MooBench/benchmark.sh"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("OverheadEvaluationMicrobenchmark/executeRemoteMicroBenchmark.sh"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("JavaEEServletContainerExample/jetty/start.ini"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("userguide/ch2--manual-instrumentation/README.txt"), "kieker-.*-emf.jar", "${rootProject.emfJar.archiveName}")
	regexpReplaceInFiles(project.file("userguide/ch5--trace-monitoring-aspectj/build.gradle"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("userguide/ch5--trace-monitoring-aspectj/README.txt"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
	regexpReplaceInFiles(project.file("userguide/ch3-4--custom-components/README.txt"), "kieker-.*-emf.jar", "${rootProject.emfJar.archiveName}")
	regexpReplaceInFiles(project.file("monitoring/probe-spring/.classpath"), "aspectjweaver-.*.jar", "aspectjweaver-${libAspectjVersion}.jar")
}

task replaceAbsoluteByRelativePathsEclipse << {
        regexpReplaceInFiles(project.file("analysis/kax-files/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("analysis/opad-anomaly-detection/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/probe-spring/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/custom-timesource/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/probe-manual/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/sampler-sigar/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/probe-aspectj/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/adaptive-monitoring/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("monitoring/sampler-jvm/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/appendix-JMS/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/ch2--manual-instrumentation/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/ch2--bookstore-application/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/appendix-Sigar/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/ch5--trace-monitoring-aspectj/.classpath"), "path=\".*/lib/", "path=\"lib/")
	regexpReplaceInFiles(project.file("userguide/ch3-4--custom-components/.classpath"), "path=\".*/lib/", "path=\"lib/")
}

task buildStandaloneExamplesUserguideCh2App(type: GradleBuild) {
	buildFile = 'userguide/ch2--bookstore-application/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesUserguideCh2Instr(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	into 'userguide/ch2--manual-instrumentation/lib/'
}

task buildStandaloneExamplesUserguideCh2Instr(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesUserguideCh2Instr') {
	buildFile = 'userguide/ch2--manual-instrumentation/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesUserguideCh34(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	into 'userguide/ch3-4--custom-components/lib/'
}

task buildStandaloneExamplesUserguideCh34(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesUserguideCh34') {
	buildFile = 'userguide/ch3-4--custom-components/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesUserguideCh5(type: Copy, dependsOn: [rootProject.aspectJJar]) {
	from ('../build/libs') {
		include "kieker-${version}-aspectj.jar"
	}
	into 'userguide/ch5--trace-monitoring-aspectj/lib/'
}

task buildStandaloneExamplesUserguideCh5(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesUserguideCh5') {
	buildFile = 'userguide/ch5--trace-monitoring-aspectj/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesUserguideAppendixSigar(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	from ('../lib/sigar') {
		include "*"
	}
	into 'userguide/appendix-Sigar/lib/'
}

task buildStandaloneExamplesUserguideAppendixSigar(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesUserguideAppendixSigar') {
	buildFile = 'userguide/appendix-Sigar/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesUserguideAppendixJMS(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	from ('../lib') {
		include "commons-logging-*.jar"
	}
	into 'userguide/appendix-JMS/lib/'
}

task buildStandaloneExamplesUserguideAppendixJMS(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesUserguideAppendixJMS') {
	buildFile = 'userguide/appendix-JMS/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLiveDemoLibsStandaloneExamplesUserguideAppendixJavaEE(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	into 'JavaEEServletContainerExample/livedemo-source/lib'
}

task copyJettyLibsStandaloneExamplesUserguideAppendixJavaEE(type: Copy, dependsOn: [rootProject.aspectJJar]) {
	from ('../build/libs') {
		include "kieker-${version}-aspectj.jar"
	}
	from ('..') {
		include "LICENSE"
		rename "LICENSE", "kieker-${version}-aspectj.jar.LICENSE"
	}
	from ('../lib/sigar') {
		include '*'
	}
	into 'JavaEEServletContainerExample/jetty/webapps/jpetstore/WEB-INF/lib'
}

task buildStandaloneExamplesUserguideAppendixJavaEE(type: GradleBuild, dependsOn: [ copyJettyLibsStandaloneExamplesUserguideAppendixJavaEE, copyLiveDemoLibsStandaloneExamplesUserguideAppendixJavaEE ]) {
	buildFile = 'JavaEEServletContainerExample/build.gradle'
	tasks = ['buildExample']
}


task copyLibsStandaloneExamplesMonitoringSigar(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../build/libs') {
		include "kieker-${version}.jar"
	}
	from ('../lib/sigar') {
		include "*"
	}
	into 'monitoring/sampler-sigar/lib/'
}

task buildStandaloneExamplesMonitoringSigar(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringSigar') {
	buildFile = 'monitoring/sampler-sigar/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringJVM(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../build/libs') {
		include "kieker-${version}.jar"
	}
	into 'monitoring/sampler-jvm/lib/'
}

task buildStandaloneExamplesMonitoringJVM(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringJVM') {
	buildFile = 'monitoring/sampler-jvm/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringSpring(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../build/libs') {
		include "kieker-${version}.jar"
	}
	from ('../lib') {
		include "aspectjweaver-*.jar"
		include "commons-logging-*.jar"
	}
	from ('../lib/framework-libs/spring/') {
		include "aopalliance-*.jar"
		include "spring-aop-*.jar"
		include "spring-beans-*.jar"
		include "spring-context-*.jar"
		include "spring-core-*.jar"
		include "spring-expression-*.jar"
	}
	into 'monitoring/probe-spring/lib/'
}

task buildStandaloneExamplesMonitoringSpring(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringSpring') {
	buildFile = 'monitoring/probe-spring/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringManual(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../build/libs') {
		include "kieker-${version}.jar"
	}
	into 'monitoring/probe-manual/lib/'
}

task buildStandaloneExamplesMonitoringManual(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringManual') {
	buildFile = 'monitoring/probe-manual/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringAspectJ(type: Copy, dependsOn: [rootProject.aspectJJar]) {
	from ('../build/libs') {
		include "kieker-${version}-aspectj.jar"
	}
	into 'monitoring/probe-aspectj/lib/'
}

task buildStandaloneExamplesMonitoringAspectJ(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringAspectJ') {
	buildFile = 'monitoring/probe-aspectj/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringAdaptive(type: Copy, dependsOn: [rootProject.aspectJJar]) {
	from ('../build/libs') {
		include "kieker-${version}-aspectj.jar"
	}
	into 'monitoring/adaptive-monitoring/lib/'
}

task buildStandaloneExamplesMonitoringAdaptive(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringAdaptive') {
	buildFile = 'monitoring/adaptive-monitoring/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesMonitoringTimesource(type: Copy, dependsOn: [rootProject.aspectJJar]) {
	from ('../build/libs') {
		include "kieker-${version}-aspectj.jar"
	}
	into 'monitoring/custom-timesource/lib/'
}

task buildStandaloneExamplesMonitoringTimesource(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesMonitoringTimesource') {
	buildFile = 'monitoring/custom-timesource/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesAnalysisKax(type: Copy, dependsOn: [rootProject.emfJar]) {
	from ('../build/libs') {
		include "kieker-${version}-emf.jar"
	}
	into 'analysis/kax-files/lib/'
}

task buildStandaloneExamplesAnalysisKax(type: GradleBuild, dependsOn: 'copyLibsStandaloneExamplesAnalysisKax') {
	buildFile = 'analysis/kax-files/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task copyLibsStandaloneExamplesAnalysisOpad(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../build/libs') {
		include "kieker-${version}.jar"
	}
	from ('../lib') {
		include 'commons-lang3-*.jar'
		include 'commons-math3-*.jar'
		include 'REngine-*.jar'
		include 'Rserve-*.jar'
		include 'Rsession-*.jar'
	}
	into 'analysis/opad-anomaly-detection/lib/'
}

task copyScriptsStandaloneExamplesAnalysisOpad(type: Copy, dependsOn: [rootProject.mainJar]) {
	from ('../bin/dev') {
		include "rserve-control.sh"
		include "rserve-control.bat"
		include "RserveStart.R"
	}
	into 'analysis/opad-anomaly-detection/'
}

task buildStandaloneExamplesAnalysisOpad(type: GradleBuild, dependsOn: [ 'copyLibsStandaloneExamplesAnalysisOpad', 'copyScriptsStandaloneExamplesAnalysisOpad' ]) {
	buildFile = 'analysis/opad-anomaly-detection/build.gradle'
	tasks = ['jar', 'eclipseClasspath', 'eclipseJdt']
}

task cleanStandaloneExamples(dependsOn: [
					 'cleanStandaloneExamplesUserguideCh2App', 
					 'cleanStandaloneExamplesUserguideCh2Instr', 
					 'cleanStandaloneExamplesUserguideCh34',
					 'cleanStandaloneExamplesUserguideCh5',
					 'cleanStandaloneExamplesUserguideAppendixSigar',
					 'cleanStandaloneExamplesUserguideAppendixJMS', 
					 'cleanStandaloneExamplesMonitoringSigar',
					 'cleanStandaloneExamplesMonitoringJVM',
					 'cleanStandaloneExamplesMonitoringSpring',
					 'cleanStandaloneExamplesMonitoringManual',
					 'cleanStandaloneExamplesMonitoringAspectJ',
					 'cleanStandaloneExamplesMonitoringAdaptive',
					 'cleanStandaloneExamplesMonitoringTimesource',
					 'cleanStandaloneExamplesAnalysisKax',
					 'cleanStandaloneExamplesAnalysisOpad',
					 'cleanStandaloneExamplesUserguideAppendixJavaEE']) {
}

task cleanStandaloneExamplesUserguideCh2App(type: GradleBuild) {
	buildFile = 'userguide/ch2--bookstore-application/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideCh2Instr(type: GradleBuild) {
	buildFile = 'userguide/ch2--manual-instrumentation/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideCh34(type: GradleBuild) {
	buildFile = 'userguide/ch3-4--custom-components/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideCh5(type: GradleBuild) {
	buildFile = 'userguide/ch5--trace-monitoring-aspectj/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideAppendixSigar(type: GradleBuild) {
	buildFile = 'userguide/appendix-Sigar/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideAppendixJMS(type: GradleBuild) {
	buildFile = 'userguide/appendix-JMS/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesUserguideAppendixJavaEE(type: GradleBuild) {
	buildFile = 'JavaEEServletContainerExample/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringSigar(type: GradleBuild) {
	buildFile = 'monitoring/sampler-sigar/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringJVM(type: GradleBuild) {
	buildFile = 'monitoring/sampler-jvm/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringSpring(type: GradleBuild) {
	buildFile = 'monitoring/probe-spring/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringManual(type: GradleBuild) {
	buildFile = 'monitoring/probe-manual/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringAspectJ(type: GradleBuild) {
	buildFile = 'monitoring/probe-aspectj/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringAdaptive(type: GradleBuild) {
	buildFile = 'monitoring/adaptive-monitoring/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesMonitoringTimesource(type: GradleBuild) {
	buildFile = 'monitoring/custom-timesource/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesAnalysisKax(type: GradleBuild) {
	buildFile = 'analysis/kax-files/build.gradle'
	tasks = ['clean']
}

task cleanStandaloneExamplesAnalysisOpad(type: GradleBuild) {
	buildFile = 'analysis/opad-anomaly-detection/build.gradle'
	tasks = ['clean']
}