<?xml version="1.0" encoding="UTF-8"?>
<project name="Kieker" default="build-all" basedir="." xmlns:artifact="urn:maven-artifact-ant">
    <property file="build.properties"/>

    <property name="KiekerTpmonTestAspect"
              value="KiekerTpmonExecutionProbeAnnotationRemote.java"/>

    <path id="classpath.libs">
        <pathelement path="${classpath}"/>
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="."/>
    </path>
	
    <path id="pmd.libs">
        <fileset dir="lib/pmd">
            <include name="*.jar"/>
        </fileset>
    </path>	

    <target name="init-version">
        <tstamp/>
        <!-- Names of the tpmon runtime libraries that will be created
	     by the build process: -->
        <property name="kieker.version"
                  value="1.0"/> <!-- -20090716-1022 -->
        <property name="kieker.dist.name"
                  value="${kieker.packagenamebase}-${kieker.version}"/>
        <property name="tpmon.dist.name"
                  value="${kieker.tpmon.packagenamebase}-${kieker.version}"/>
        <property name="tpan.dist.name"
                  value="${kieker.tpan.packagenamebase}-${kieker.version}"/>
        <property name="common.dist.name"
                  value="${kieker.common.packagenamebase}-${kieker.version}"/>
        <property name="dist.tpmon.ltw"
                  value="${tpmon.dist.name}_${kieker-tpmon-ltwjar.suffix}.jar"/>
        <property name="dist.tpmon.ctw"
                  value="${tpmon.dist.name}_${kieker-tpmon-ctwjar.suffix}.jar"/>
        <property name="dist.tpmon.ctrl"
                  value="${tpmon.dist.name}_${kieker-tpmon-ctrljar.suffix}.jar"/>
        <property name="dist.tpmon.controlServlet"
                  value="${tpmon.dist.name}_${kieker-tpmon-controlServletwar.suffix}.war"/>
        <property name="dist.kieker.common"
                  value="${common.dist.name}.jar"/>
        <property name="dist.tpan.ctrl"
                  value="${tpan.dist.name}_${kieker-tpan-ctrljar.suffix}.jar"/>
        <property name="dist.kieker.srcBaseName"
                  value="${kieker.dist.name}_${kieker-src.suffix}"/>
        <property name="dist.kieker.binBaseName"
                  value="${kieker.dist.name}_${kieker-bin.suffix}"/>
        <property name="dist.kieker.example.myexample"
                  value="${kieker.example.myexample.packagenamebase}"/>
    </target>

    <target name="update-version" unless="version.noupdate"
            depends="init-version">
        <echo>Updating version string</echo>
        <replaceregexp file="src/kieker/tpmon/core/TpmonVersion.java"
                       match="VERSION = &quot;.*?&quot;"
                       replace="VERSION = &quot;${kieker.version}-${DSTAMP}&quot;"/>
        <replaceregexp match="&lt;version&gt;.*?&lt;/version&gt;"
                       replace="&lt;version&gt;${kieker.version}-${DSTAMP}&lt;/version&gt;">
            <fileset dir=".">
                <include name="pom_ant_kieker*.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="build-all"
            depends="clean,init,build-tpmon-ctw,build-tpmon-ltw,build-tpmon-ctrl,build-tpmon-control-servlet,build-kieker.common,build-tpan-ctrl">
    </target>

    <condition property="no.kieker.properties">
        <not>
            <available file="${kieker.properties}"/>
        </not>
    </condition>

    <target name="init-kieker-properties" if="no.kieker.properties">
        <!-- if no kieker.common.properties, copy example file automatically  -->
        <echo message="${kieker.common.properties} not existing.
                       Creating default file."/>
        <copy file="${kieker.properties.example}" tofile="${kieker.properties}"/>
    </target>

    <condition property="no.tpan.properties">
        <not>
            <available file="${tpan.properties}"/>
        </not>
    </condition>

    <target name="init-tpan-properties" if="no.tpan.properties">
        <!-- if no tpan.properties, copy example file automatically  -->
        <echo message="${tpan.properties} not existing.
                       Creating default file."/>
        <copy file="${tpan.properties.example}" tofile="${tpan.properties}"/>
    </target>

    <condition property="no.tpmon.properties">
        <not>
            <available file="${tpmon.properties}"/>
        </not>
    </condition>

    <target name="init-tpmon-properties" if="no.tpmon.properties">
        <!-- if no tpmon.properties, copy example file automatically  -->
        <echo message="${tpmon.properties} not existing.
                       Creating default file."/>
        <copy file="${tpmon.properties.example}" tofile="${tpmon.properties}"/>
    </target>

    <target name="init-properties"
            depends="init-kieker-properties,init-tpmon-properties,init-tpan-properties,init-log4-properties-tests">
    </target>

    <target name="init" depends="update-version,init-properties">
        <!-- Register special aspectJ commands in ant - allow ant to use special AspectJ commands: -->
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" classpath="${aspectjtoolsjar}"/>
        <fail message="Critical error: AspectJ library not found
                       in ${aspectjtoolsjar}. 
                       Check your build.properties.">
            <condition>
                <not>
                    <available file="${aspectjtoolsjar}"/>
                </not>
            </condition>
        </fail>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${build.tests.dir}"/>
        <mkdir dir="tmp"/>

        <!-- Classpath with Kieker Ctrl and external libs  -->
        <path id="tpmon.core.classpath">
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.tpmon.ctrl}"/>
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <!-- Classpath with kieker.common and external libs  -->
        <path id="kieker.common.classpath">
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <!-- Classpath with tpan and external libs  -->
        <path id="tpan.core.classpath">
            <fileset dir="tpan-plugins"> <!-- this has to be before! the other libs follow!, else wired javafx errors might occure on com.sun.scenario.scenegraph.SGGroup -->
                    <include name="**/*.jar"/>
            </fileset>
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.tpan.ctrl}"/>
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <path id="run.tests.classpath">
            <path refid="tpmon.core.classpath"/>
            <pathelement location="${build.tests.dir}/"/>
        </path>
    </target>

    <!-- build a tpmon package that doesn't contain the aspect code (for direct invocation of tpmon) -->
    <target name="build-tpmon-ctrl" depends="init">
        <delete dir="${build.tpmon.ctrl.dir}"/>
        <mkdir  dir="${build.tpmon.ctrl.dir}"/>
        <mkdir  dir="${build.tpmon.ctrl.dir}/META-INF"/>
        <echo message="Creating the library of tpmon (${dist.tpmon.ctrl}) that is supposed for direct invocations - it doesn't contain the AOP instrumentation mechanisms."/>
        <javac destDir="${build.tpmon.ctrl.dir}"
               source="1.5"
        	   target="1.5"
               srcdir="src"
               debug="true"
               classpathref="classpath.libs">
            <compilerarg value="-Xlint:all,-path"/>
            <include name="kieker/tpmon/annotation/**"/>
            <include name="kieker/tpmon/core/**"/>
            <include name="kieker/tpmon/monitoringRecord/**"/>
            <include name="kieker/tpmon/reader/**"/>
            <include name="kieker/tpmon/writer/**"/>
            <include name="kieker/tpmon/probe/IKiekerMonitoringProbe.java"/>
        </javac>
        <copy file="${tpmon.properties}" todir="${build.tpmon.ctrl.dir}/META-INF"/>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.tpmon.ctrl.dir}/">
            <fileset dir="src">
                <include name="kieker/tpmon/annotation/**/*.java"/>
                <include name="kieker/tpmon/core/**/*.java"/>
                <include name="kieker/tpmon/monitoringRecord/**/*.java"/>
                <include name="kieker/tpmon/reader/**/*.java"/>
                <include name="kieker/tpmon/writer/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.tpmon.ctrl}">
            <fileset dir="${build.tpmon.ctrl.dir}"/>
        </jar>
    </target>

    <target name="build-tpmon-ltw" depends="init,build-tpmon-ctrl">
        <delete dir="${build.tpmon.ltw.dir}"/>
        <mkdir dir="${build.tpmon.ltw.dir}"/>
        <echo message="Creating the load-time-weaving library of tpmon (${dist.tpmon.ltw})."/>
        <!-- <iajc destDir="${build.tpmon.ltw.dir}"
              source="1.5"
        	  target="1.5"
              verbose="off"
              srcdir="src/kieker/tpmon/probe/aspectJ"
              debug="true"
              classpathref="tpmon.core.classpath">
        </iajc> -->
        <javac destDir="${build.tpmon.ltw.dir}"
               source="1.5"
        	   target="1.5"
               verbose="off"
               srcdir="src/kieker/tpmon/probe/"
               debug="true"
               classpathref="tpmon.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
            <!--<exclude name="kieker/tpmon/probe/aspectJ/**"/>-->
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.tpmon.ltw.dir}/">
            <fileset dir="src">
                <include name="kieker/tpmon/probe/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.tpmon.ltw}">
            <fileset dir="${build.tpmon.ltw.dir}"/>
        </jar>
    </target>
    
    <target name="build-tpmon-ctw" depends="init,build-tpmon-ctrl">
        <delete dir="${build.tpmon.ctw.dir}"/>
        <mkdir  dir="${build.tpmon.ctw.dir}"/>
        <echo message="Creating the compile-time-weaving library of tpmon (${dist.tpmon.ctw}). This library can be used in two ways: 1) for compile time instrumentation 2) via the tpmon API - if you want to invoke tpmon manually. This library cannot be used for load-time-weaving with the javaagent property!"/>
        <javac destDir="${build.tpmon.ctw.dir}"
               source="1.5"
        	   target="1.5"
               verbose="off"
               srcdir="src/kieker/tpmon/probe/aspectJ/"
               debug="true"
               classpathref="tpmon.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.tpmon.ctw.dir}/">
            <fileset dir="src">
                <include name="kieker/tpmon/probe/aspectJ/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.tpmon.ctw}">
            <fileset dir="${build.tpmon.ctw.dir}"/>
        </jar>
    </target>

    <target name="build-tpmon-control-servlet" depends="init,build-tpmon-ctrl">
        <delete dir="${build.tpmon.controlServlet.dir}"/>
        <mkdir dir="${build.tpmon.controlServlet.dir}"/>
        <javac source="1.5" target="1.5"
               destDir="${build.tpmon.controlServlet.dir}"
               classpathref="tpmon.core.classpath"
               srcdir="src/kieker/tpmon/controlServlet"
               debug="true"/>
        <!-- We want to include the sources in this war -->
        <copy todir="${build.tpmon.controlServlet.dir}/">
            <fileset dir="src">
                <include name="kieker/tpmon/controlServlet/**/*.java"/>
            </fileset>
        </copy>
        <war destfile="${dist.dir}/${dist.tpmon.controlServlet}" webxml="src/kieker/tpmon/controlServlet/WEB-INF/web.xml">
            <classes dir="${build.tpmon.controlServlet.dir}"/>
            <zipfileset dir="src/kieker/tpmon/controlServlet/images" prefix="images"/>
        </war>
    </target>

    <!-- Build tpan  -->
    <target name="build-tpan-ctrl" depends="init,build-tpmon-ctrl,build-kieker.common">
        <delete dir="${build.tpan.ctrl.dir}"/>
        <mkdir  dir="${build.tpan.ctrl.dir}"/>
        <mkdir  dir="${build.tpan.ctrl.dir}/META-INF"/>
        <echo message="Creating the library of tpan (${dist.tpan.ctrl})."/>
        <javac destDir="${build.tpan.ctrl.dir}"
               source="1.5" target="1.5"
               srcdir="src/kieker/tpan/"
               debug="true"
               classpathref="tpmon.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <copy file="${tpan.properties}" todir="${build.tpan.ctrl.dir}/META-INF"/>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.tpan.ctrl.dir}/">
            <fileset dir="src">
                <include name="kieker/tpan/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.tpan.ctrl}">
            <fileset dir="${build.tpan.ctrl.dir}"/>
        </jar>
    </target>

    <!-- Build kieker.common  -->
    <target name="build-kieker.common" depends="init">
        <delete dir="${build.kieker.common.dir}"/>
        <mkdir  dir="${build.kieker.common.dir}"/>
        <mkdir  dir="${build.kieker.common.dir}/META-INF"/>
        <echo message="Creating the library of kieker.common (${dist.kieker.common})."/>
        <javac destDir="${build.kieker.common.dir}"
               source="1.5" target="1.5"
               srcdir="src/kieker/common/"
               debug="true"
               classpathref="tpmon.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <copy file="${kieker.properties}" todir="${build.kieker.common.dir}/META-INF"/>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.common.dir}/">
            <fileset dir="src">
                <include name="kieker/common/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.common}">
            <fileset dir="${build.kieker.common.dir}"/>
        </jar>
    </target>

    <target name="build-tpmon-sources" depends="init">
        <patternset id="dist_src_files">
            <include name="bin/*.sh"/>
            <include name="bin/log4j.properties"/>
            <include name="META-INF/*.example"/>
	    <include name="${aop.xml.ltwtests}"/>
            <include name="src/**/*.java"/>
            <include name="src/kieker/tpmon/controlServlet/WEB-INF/web.xml"/>
            <include name="src/kieker/tpmon/controlServlet/images/**"/>
            <include name="lib/**"/>
            <include name="build.xml"/>
            <include name="build.properties"/>
            <include name="RELEASENOTES"/>
            <include name="HISTORY"/>
	    <include name="pom_ant_kieker-*.xml"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.srcBaseName}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_src_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.srcBaseName}.tar.gz" src="${release.dir}/${dist.kieker.srcBaseName}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.srcBaseName}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.srcBaseName}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_src_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-tpmon-binaries" depends="build-all">
	    <echo message="${dist.dir}/${dist.tpmon.ltw}"/>
        <patternset id="dist_bin_files">
            <include name="bin/*.sh"/>
            <include name="bin/log4j.properties"/>
            <include name="dist/*.jar"/>
            <include name="dist/*.war"/>
            <include name="META-INF/*.example"/>
            <include name="lib/**"/>
            <include name="RELEASENOTES"/>
            <include name="HISTORY"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.binBaseName}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_bin_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.binBaseName}.tar.gz" src="${release.dir}/${dist.kieker.binBaseName}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.binBaseName}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.binBaseName}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_bin_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-example" depends="init">
	    <echo message="${dist.dir}/${dist.kieker.example.myexample}"/>
        <patternset id="dist_myExample_files">
            <include name="examples/MySimpleKiekerExample/README"/>
            <include name="examples/MySimpleKiekerExample/build.xml"/>
            <include name="examples/MySimpleKiekerExample/build.properties"/>
            <include name="examples/MySimpleKiekerExample/lib/"/>
            <exclude name="examples/MySimpleKiekerExample/lib/**"/>
            <include name="examples/MySimpleKiekerExample/META-INF/**"/>
            <include name="examples/MySimpleKiekerExample/src/**"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.example.myexample}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_bin_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.example.myexample}.tar.gz" src="${release.dir}/${dist.kieker.example.myexample}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.example.myexample}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.example.myexample}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_myExample_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="release" depends="build-all,build-tpmon-sources,build-tpmon-binaries,build-example">
        <echo message="Sourceforge release instructions can be found at:"/>
	<echo message="https://sourceforge.net/apps/trac/sourceforge/wiki/Release files for download#Createoreditarelease"/>
	<echo message="scp dist/release/kieker-VERSION_* USER@frs.sourceforge.net:uploads"/>
    </target>

    <target name="clean">
	<!-- <delete dir="tmp"/>-->
        <delete dir="${dist.dir}"/>
        <delete dir="${release.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <delete dir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
    </target>

    <target name="run-test-storage" depends="build-tpmon-ctrl">
        <echo>
            This is a small test for the part of Tpmon that
            stores monitoring data. Tpmon's monitoring API 
            is manually invoked to collect monitoring data. 
            Therefore, the instrumentation and logic in the
            monitoring points (the aspects) of Tpmon is not
            used. 
            
            The main purpose of this test is to isolate configuration and 
            installation problems and to get Tpmon running.
            
            If in tpmon.properties file system storage (store in database = 
            false) is selected, a new file (tpmon*.dat) with monitoring data
            should be created in the folder specified in tpmon.properties
            (default: /tmp).
        </echo>
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="tpmon.core.classpath"
               srcdir="src/kieker/tests/storageOnly/"
               verbose="off"
               debug="true"/>
        <copy file="${tests.log4j.properties}"
	      todir="${build.dir}/"/>
        <java
            dir="."
            fork="true"
            classpathref="run.tests.classpath"
	    classname="kieker.tests.storageOnly.StorageOnly">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <!-- <jvmarg value="-javaagent:../${aspectjweaverjar}"/> -->
            <!-- <jvmarg value="-XX:+PrintGCTimeStamps"/> -->
            <!-- <jvmarg value="-Xloggc:details.out"/> -->
            <!-- <jvmarg value="-verbosegc"/> -->
        </java>
    </target>

    <condition property="no.log4j.properties.tests">
        <not>
            <available file="${tests.log4j.properties}"/>
        </not>
    </condition>

    <target name="init-log4-properties-tests" if="no.log4j.properties.tests">
        <!-- if no aop.xml, copy example file automatically  -->
        <echo message="${no.log4j.properties.tests} not existing.
                       Creating default file."/>
        <copy file="${log4j.properties.example}" tofile="${tests.log4j.properties}"/>
    </target>

    <target name="compile-tests-loadTimeWeaving"
	    depends="build-tpmon-ltw">
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="tpmon.core.classpath"
               srcdir="src"
               includes="kieker/tests/loadTimeWeaving/"
               excludes="kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/">
            <!--<exclude name="src/kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/"/>-->
<!--               excludes="kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/**">-->
        </javac>
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests}"
	      tofile="${build.tests.dir}/META-INF/aop.xml"/>
    </target>

    <target name="compile-tests-loadTimeWeavingDifferentRecordTypes"
	        depends="build-tpmon-ltw">
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="tpmon.core.classpath"
               srcdir="src/kieker/tests/loadTimeWeaving/">
            <classpath> <!-- includes kieker/tpmon/probe/manual -->
                <pathelement location="${dist.dir}/${dist.tpmon.ltw}"/>
            </classpath>
        </javac>
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests}"
	      tofile="${build.tests.dir}/META-INF/aop.xml"/>
    </target>
    
    <target name="run-tests-loadTimeWeaving-bookstoreDifferentRecordTypes"
            depends="compile-tests-loadTimeWeavingDifferentRecordTypes">
        <java dir="."
              fork="true"              
              classname="kieker.tests.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ltw}"/>
            </classpath>
        </java>
    </target>

    <!-- TODO: doesn't work at the moment; probably because an appropriate aop.xml
               with a non-annotation aspect needs to be passed -->
    <target name="run-tests-loadTimeWeaving-bookstoreWithoutAnnotation"
            depends="compile-tests-loadTimeWeaving">
        <java dir="."
              fork="true"              
              classname="kieker.tests.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ltw}"/>
            </classpath>
        </java>
    </target>

    <target name="run-tests-loadTimeWeaving-executionOrderTest"
            depends="compile-tests-loadTimeWeaving">
        <java dir="."
              fork="true"
              classname="kieker.tests.loadTimeWeaving.executionOrderTest.ExecutionOrderTest"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ltw}"/>
            </classpath>
        </java>
    </target>

    <target name="compile-tests-compileTimeWeaving-bookstore" depends="build-tpmon-ctw">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>        
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="tpmon.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/bookstore/"/>
            </sourceroots>
        </iajc>
    </target>

    <target name="compile-tests-compileTimeWeaving-twoConcurrentMethodsExample" depends="build-tpmon-ctw,init-log4-properties-tests">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>        
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="tpmon.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/"/>
            </sourceroots>
        </iajc>
    </target>
    
    <target name="compile-tests-compileTimeWeaving-bookstoreDB" depends="build-tpmon-ctw,compile-tests-compileTimeWeaving-bookstore">
        <javac destDir="${build.tests.dir}"
               source="1.5" target="1.5"
               verbose="off"
               srcdir="src/kieker/tests/util/"
               debug="true"
               classpathref="classpath.libs">
            <compilerarg value="-Xlint:all"/>
        </javac>
    </target>

    <target name="compile-tests-compileTimeWeaving-bookstoreBenchmark" depends="build-tpmon-ctw">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/tpmon/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc  destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="tpmon.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/"/>
            </sourceroots>
            <!--<aspectpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ctw}"/>
            </aspectpath>-->
        </iajc>
    </target>

    <target name="run-tests-compileTimeWeaving-bookstore" depends="compile-tests-compileTimeWeaving-bookstore">
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <!-- TODO: test doesn't run at the moment. We should pass a fix tpmon.properties! -->
    <target name="run-tests-compileTimeWeaving-bookstoreDB" depends="compile-tests-compileTimeWeaving-bookstoreDB">
        <delete dir="${tests.javadb.kiekerdb.path}"/> <!-- delete existing DB -->
        <java dir="."
              fork="true"
              classpathref="run.tests.classpath"
              classname="kieker.tests.util.JavaDBInitializer">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.dbDriverClassname="/>
            <jvmarg value="-Dtpmon.dbConnectionAddress=jdbc:derby:${tests.javadb.kiekerdb.path};user=DBUSER;password=DBPASS"/>
            <jvmarg value="-Dtpmon.dbTableName=APP.tpmondata"/>
        </java>
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.logMonitoringRecordTypeIds=false"/> <!-- type logging currently not supported by DB writers -->
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.dbDriverClassname="/>
            <jvmarg value="-Dtpmon.dbConnectionAddress=jdbc:derby:tmp/KIEKER;user=DBUSER;password=DBPASS"/>
            <jvmarg value="-Dtpmon.dbTableName=APP.tpmondata"/>
        </java>
    </target>

    <!-- TODO: monitoring log contains invalid traces (lowest eoi/ess 1;1 instead of 0;0) -->
    <target name="run-tests-compileTimeWeaving-bookstore-synchronized" depends="compile-tests-compileTimeWeaving-bookstore">
        <echo message="Using Bookstore variant with synchronized Catalog.getBooks (is slower)."/>
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.synchron.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <target name="run-tests-compileTimeWeaving-twoConcurrentMethodsExample" depends="compile-tests-compileTimeWeaving-twoConcurrentMethodsExample">  
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.twoConcurrentMethodsExample.Starter"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <!--
    <target name="run-benchmark-compileTimeWeaving-bookstore" depends="compile-tests-compileTimeWeaving-bookstoreBenchmark">
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstoreBenchmark.Bookstore"              
	          classpathref="run.tests.classpath">
            <jvmarg value="-server"/>
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
        <exec command="bash -c &quot;echo 'opname resp_ns' &gt; tmp/benchmark-tpmon-cur.dat&quot;" failonerror="true"/>
        <exec command="bash -c &quot;awk -F';' '{ print $2 , ($6-$5) }' tmp/tpmon-*/*.dat | sed s/'kieker.tests.compileTimeWeaving.bookstoreBenchmark.'/''/g >> tmp/benchmark-tpmon-cur.dat&quot;"
        	failonerror="true" />
        <exec command="bash -c &quot;R -vanilla &lt; ./src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/gen-results.r&quot;"/>
        <exec command="okular tmp/benchmark-results.pdf" spawn="true" />
    </target>
    -->

    <!-- TODO: These run targets should be removed since wrapper scripts are supposed to start tpan & co   -->

    <target name="run-tpan" depends="build-tpan-ctrl">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
        <java dir="."
              fork="true"
              classname="kieker.tpan.TpanTool"
              classpathref="tpan.core.classpath">
                  <!-- select-traces 3 -->
            <arg line="--inputdir ${inputDir} --outputdir tmp/  --plot-Dependency-Graph --plot-Sequence-Diagram"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ctrl}"/>
                <pathelement location="${dist.dir}/${dist.kieker.common}"/>
                <pathelement location="${dist.dir}/${dist.tpan.ctrl}"/>
                 <fileset dir="tpan-plugins">
                    <include name="**/*.jar"/>
                 </fileset>
            </classpath>
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>

    <target name="run-tpan-jmslistener" depends="build-tpan-ctrl">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
         <!--<java classname="${main.class}" classpath="${dist.dir}/${application.title}.jar" failonerror="true" fork="true" jvm="${platform.fxhome}/bin/javafx${binary.extension}" jvmargs="${run.jvmargs}">
            <arg line="${application.args}"/>
        </java> -->
        <java dir="."
              fork="true"
              classname="kieker.tpan.TpanTool"
              classpathref="tpan.core.classpath">
                  <!-- select-traces 3 -->
            <arg line="--outputdir tmp/  --init-basic-JMS-reader"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.configuration=${tests.jmsreader.tpmon.properties}"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.tpmon.ctrl}"/>
                <pathelement location="${dist.dir}/${dist.kieker.common}"/>
                <pathelement location="${dist.dir}/${dist.tpan.ctrl}"/>
            </classpath>
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>

    <target name="run-tpan-jmslistener-javafx" depends="build-tpan-ctrl">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
         <!--<java classname="${main.class}" classpath="${dist.dir}/${application.title}.jar" failonerror="true" fork="true" jvm="${platform.fxhome}/bin/javafx${binary.extension}" jvmargs="${run.jvmargs}">
            <arg line="${application.args}"/>
        </java> -->
        <java dir="."
              fork="true"
              classname="kieker.tpan.TpanTool"
              jvm="/mnt/sda4/netbeans651/netbeans-6.5.1/javafx2/javafx-sdk/bin/javafx"
              classpathref="tpan.core.classpath">
                  <!-- select-traces 3 -->
            <arg line="--outputdir tmp/  --init-basic-JMS-reader"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>            
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>
    
    <target name="pmd">
     <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.libs"/>
     <pmd shortFilenames="true">
      <ruleset>rulesets/favorites.xml</ruleset>
      <ruleset>basic</ruleset>
      <formatter type="html" toFile="pmd_report.html" />
      <fileset dir="src/kieker/" includes="**/*.java"/>
     </pmd>
    </target>

    <target name="mvn-init" depends="update-version">
        <xmlproperty file="pom.xml" prefix="pom.xml" />
        <path id="maven-ant-tasks.classpath" path="lib/maven/maven-ant-tasks-2.0.10.jar" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
            classpathref="maven-ant-tasks.classpath" />
    </target>
	
    <target name="mvn-deploy" depends="mvn-init, mvn-deploy-base, mvn-deploy-ctrl, mvn-deploy-ctw, mvn-deploy-ltw" />
	
    <target name="mvn-deploy-ctrl" depends="build-tpmon-ctrl, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-tpmon-ctrl.xml" />
        <artifact:deploy file="${dist.dir}/${dist.tpmon.ctrl}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
    
    <target name="mvn-deploy-ctw" depends="build-tpmon-ctw, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-tpmon-ctw.xml" />
        <artifact:deploy file="${dist.dir}/${dist.tpmon.ctw}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
    
    <target name="mvn-deploy-ltw" depends="build-tpmon-ltw, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-tpmon-ltw.xml" />
        <artifact:deploy file="${dist.dir}/${dist.tpmon.ltw}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
	
    <target name="mvn-deploy-base" depends="mvn-init">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-base.xml" />
        <artifact:deploy file="pom_ant_kieker-base.xml">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>	
</project>
