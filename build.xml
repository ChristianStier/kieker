<?xml version="1.0" encoding="UTF-8"?>
<project name="Kieker" default="build-all" basedir=".">
	<property file="build.properties" />
	<property name="TestAspect" value="OperationExecutionAspectFull.java" />

	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />

	<target name="-init-version" description="Initializes variables based on the Kieker version number">
		<tstamp />
		<property name="kieker.name" value="Kieker Framework" />
		<property name="kieker.version" value="1.6-SNAPSHOT" />
		<property name="year" value="2012" />
		<property name="copyright" value="Kieker Project" />
		
		<property name="dist.kieker.main.jar" value="${kieker.main.packagenamebase}-${kieker.version}.jar" />
		<property name="dist.kieker.main.aspectj.jar" value="${kieker.main.packagenamebase}-${kieker.version}_aspectj.jar" />
		<property name="dist.kieker.main.aspectj.jar.latex" value="${kieker.main.packagenamebase}-${kieker.version}\\\\\\_aspectj.jar" />
		<property name="dist.kieker.main.emf.jar" value="${kieker.main.packagenamebase}-${kieker.version}_emf.jar" />
		<property name="dist.kieker.main.emf.jar.latex" value="${kieker.main.packagenamebase}-${kieker.version}\\\\\\_emf.jar" />
		<property name="kieker.dist.name" value="${kieker.packagenamebase}-${kieker.version}" />
		<property name="dist.kieker.srcBaseName" value="${kieker.dist.name}_${kieker-src.suffix}" />
		<property name="dist.kieker.binBaseName" value="${kieker.dist.name}_${kieker-bin.suffix}" />
		<property name="dist.kieker.apiBaseName" value="${kieker.dist.name}_${kieker-api.suffix}" />
		<property name="dist.kieker.userguide.pdf" value="${kieker.dist.name}_${kieker-userguide.suffix}.pdf" />
	</target>

	<target name="-update-version" unless="version.noupdate" depends="-init-version" description="Updates the version number contained in the Kieker sources">
		<replaceregexp file="${src.kieker.common.dir}/kieker/common/util/Version.java" match="VERSION = &quot;.*?&quot;" replace="VERSION = &quot;${kieker.version}&quot;" />
	</target>

	<target name="build-all" depends="clean,-init,build-kieker.main,build-kieker.main.aspectj,build-kieker.main.emf" description="Compiles and packages the Kieker Jar and War files (calls the 'build-kieker-*' targets)">
	</target>

	<target name="-init" depends="clean,-update-version,-init-compile-classpaths" description="Initializes variables and creates directories">
		<!-- Register special aspectj commands in ant - allow ant to use special AspectJ commands: -->
		<path id="aspectjtools-jar">
			<fileset dir="${lib.dir}">
				<include name="aspectjtools-*.jar" />
			</fileset>
		</path>
		<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" classpathref="aspectjtools-jar" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${release.dir}" />
		<mkdir dir="${build.tests.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<!-- Compile classpaths used for javac and javadoc -->
	<target name="-init-compile-classpaths" description="Initializes the classpath variables for the compile and Javadoc targets">
		<path id="kieker.common-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="commons-logging-*.jar" />
			</fileset>
		</path>

		<path id="kieker.monitoring-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="aopalliance-*.jar" />
				<!--<include name="aspectjrt-*.jar" />-->
				<include name="cxf-api-*.jar" />
				<include name="cxf-common-utilities-*.jar" />
				<include name="cxf-rt-core-*.jar" />
				<include name="cxf-rt-bindings-soap-*.jar" />
				<include name="javax.jms-*.jar" />
				<include name="javax.servlet-*.jar" />
				<include name="sigar-*.jar" />
				<include name="org.springframework.context-*.jar" />
				<include name="org.springframework.web-*.jar" />
			</fileset>
			<pathelement location="${build.kieker.common.dir}/" />
		</path>

		<path id="kieker.monitoring-ajc-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjrt-*.jar" />
				<include name="javax.servlet-*.jar" />
			</fileset>
			<pathelement location="${build.kieker.common.dir}/" />
			<pathelement location="${build.kieker.monitoring.dir}" />
		</path>

		<path id="kieker.analysis-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="javax.jms-*.jar" />
				<include name="org.eclipse.emf.*.jar" />
			</fileset>
			<pathelement location="${build.kieker.common.dir}/" />
			<pathelement location="${build.kieker.analysis.model.dir}/" />
		</path>

		<path id="kieker.tools-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="commons-cli-*.jar" />
				<include name="jgraphx-*.jar" />
			</fileset>
			<pathelement location="${build.kieker.common.dir}/" />
			<pathelement location="${build.kieker.monitoring.dir}/" />
			<pathelement location="${build.kieker.analysis.dir}/" />
			<pathelement location="${build.kieker.analysis.model.dir}/" />
		</path>
	</target>

	<!-- Build kieker.common  -->
	<target name="-compile-kieker.common" depends="-init" description="Compiles the sources commonly used by all Kieker components">
		<delete dir="${build.kieker.common.dir}" />
		<mkdir dir="${build.kieker.common.dir}" />
		<javac destDir="${build.kieker.common.dir}" source="1.5" target="1.5" srcdir="${src.kieker.common.dir}" debug="true" classpathref="kieker.common-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kieker.monitoring" depends="-init,-compile-kieker.common" description="Compiles the sources of the Kieker.Monitoring component">
		<delete dir="${build.kieker.monitoring.dir}" />
		<mkdir dir="${build.kieker.monitoring.dir}" />
		<mkdir dir="${build.kieker.monitoring.dir}/META-INF" />
		<javac destDir="${build.kieker.monitoring.dir}" source="1.5" target="1.5" srcdir="${src.kieker.monitoring.dir}" excludes="kieker/monitoring/probe/aspectj/" debug="true" classpathref="kieker.monitoring-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
		<!-- WORKAROUND!!! otherwise the include statement of the aop.xml HAS TO include the apsect.class files -->
		<iajc destdir="${build.kieker.monitoring.dir}" source="1.5" target="1.5" Xlint="ignore" debug="true" classpathref="kieker.monitoring-ajc-compile-classpath">
			<sourceroots>
				<pathelement location="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/" />
			</sourceroots>
		</iajc>
		<copy file="${kieker.monitoring.default.properties}" tofile="${build.kieker.monitoring.dir}/META-INF/kieker.monitoring.default.properties" />
		<copy file="${kieker.monitoring.adaptiveMonitoring.default.conf}" tofile="${build.kieker.monitoring.dir}/META-INF/kieker.monitoring.adaptiveMonitoring.default.conf" />
	</target>

	<target name="-compile-kieker.analysis.model" depends="-init" description="Compiles the sources of the Analysis Meta-Model">
		<delete dir="${build.kieker.analysis.model.dir}" />
		<mkdir dir="${build.kieker.analysis.model.dir}" />
		<javac destDir="${build.kieker.analysis.model.dir}" source="1.5" target="1.5" srcdir="${src.gen.kieker.analysis.dir}" debug="true" classpathref="kieker.analysis-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kieker.analysis" depends="-init,-compile-kieker.common,-compile-kieker.analysis.model" description="Compiles the sources of the Kieker.Analysis component">
		<delete dir="${build.kieker.analysis.dir}" />
		<mkdir dir="${build.kieker.analysis.dir}" />
		<javac destDir="${build.kieker.analysis.dir}" source="1.5" target="1.5" srcdir="${src.kieker.analysis.dir}" debug="true" classpathref="kieker.analysis-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kieker.tools" depends="-init,-compile-kieker.common,-compile-kieker.monitoring,-compile-kieker.analysis" description="Compiles the sources of Kieker tools">
		<delete dir="${build.kieker.tools.dir}" />
		<mkdir dir="${build.kieker.tools.dir}" />
		<javac destDir="${build.kieker.tools.dir}" source="1.5" target="1.5" srcdir="${src.kieker.tools.dir}" debug="true" classpathref="kieker.tools-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
		<copy file="${sequence.pic}" tofile="${build.kieker.tools.dir}/META-INF/sequence.pic" />
	</target>

	<target name="compile-kieker" depends="-init,-compile-kieker.common,-compile-kieker.monitoring,-compile-kieker.analysis,-compile-kieker.tools" description="Compiles the Kieker sources (calls all 'compile-kieker.*' targets)">
	</target>

	<target name="build-kieker.main" depends="-init,compile-kieker" description="Compiles and packages the Kieker Jar file">
		<jar destfile="${dist.dir}/${dist.kieker.main.jar}">
			<fileset dir="${build.kieker.common.dir}" />
			<fileset dir="${build.kieker.analysis.dir}" />
			<fileset dir="${build.kieker.analysis.model.dir}" />
			<fileset dir="${build.kieker.monitoring.dir}" />
			<fileset dir="${build.kieker.tools.dir}" />
			<fileset dir="." includes="${license.file}" />
			<manifest>
				<section name="kieker">
					<attribute name="Specification-Title" value="${kieker.name}" />
					<attribute name="Specification-Version" value="${kieker.version}" />
					<attribute name="Specification-Vendor" value="${copyright}" />
					<attribute name="Implementation-Title" value="${kieker.name}" />
					<attribute name="Implementation-Version" value="${kieker.version} (${TODAY})" />
					<attribute name="Implementation-Vendor" value="${copyright}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<!--
	<target name="rebuild-aspectj" description="Corrects the manifest.mf file of the aspectweaver-*.jar">
		<fileset dir="${lib.dir}" id="aspectjweaver-jar-set">
			<include name="aspectjweaver-*.jar" />
		</fileset>
		<pathconvert property="aspectjweaver-jar" refid="aspectjweaver-jar-set" />
		<jar destfile="${dist.dir}/aspectjweaver.jar" duplicate="fail" filesetmanifest="merge">
			<zipfileset src="${aspectjweaver-jar}" />
			<manifest>
				<attribute name="Premain-Class" value="org.aspectj.weaver.loadtime.Agent" />
				<attribute name="Can-Redefine-Classes" value="true" />
			</manifest>
		</jar>
	</target>
	-->

	<target name="build-kieker.main.aspectj" depends="-init,build-kieker.main" description="Compiles and packages the Kieker Jar file including the aspectweaver">
		<fileset dir="${lib.dir}" id="aspectjweaver-jar-set">
			<include name="aspectjweaver-*.jar" />
		</fileset>
		<pathconvert property="aspectjweaver-jar" refid="aspectjweaver-jar-set" />
		<jar destfile="${dist.dir}/${dist.kieker.main.aspectj.jar}" duplicate="fail" filesetmanifest="merge">
			<zipfileset src="${dist.dir}/${dist.kieker.main.jar}" />
			<zipfileset src="${aspectjweaver-jar}" />
			<fileset dir="${lib.dir}" includes="aspectjweaver-*.LICENSE" />
			<manifest>
				<attribute name="Premain-Class" value="org.aspectj.weaver.loadtime.Agent" />
				<attribute name="Can-Redefine-Classes" value="true" />
			</manifest>
		</jar>
	</target>

	<target name="build-kieker.main.emf" depends="-init,build-kieker.main" description="Compiles and packages the Kieker Jar file including the EMF runtime">
		<fileset dir="${lib.dir}" id="org.eclipse.emf.common-jar-set">
			<include name="org.eclipse.emf.common_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.common-jar" refid="org.eclipse.emf.common-jar-set" />
		<fileset dir="${lib.dir}" id="org.eclipse.emf.ecore.xmi-jar-set">
			<include name="org.eclipse.emf.ecore.xmi_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.ecore.xmi-jar" refid="org.eclipse.emf.ecore.xmi-jar-set" />
		<fileset dir="${lib.dir}" id="org.eclipse.emf.ecore-jar-set">
			<include name="org.eclipse.emf.ecore_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.ecore-jar" refid="org.eclipse.emf.ecore-jar-set" />
		<jar destfile="${dist.dir}/${dist.kieker.main.emf.jar}" duplicate="fail" filesetmanifest="skip">
			<manifest> <!-- would be better to take it from the jar, but somehow doesn't work -->
				<section name="kieker">
					<attribute name="Specification-Title" value="${kieker.name}" />
					<attribute name="Specification-Version" value="${kieker.version}" />
					<attribute name="Specification-Vendor" value="${copyright}" />
					<attribute name="Implementation-Title" value="${kieker.name}" />
					<attribute name="Implementation-Version" value="${kieker.version} (${TODAY})" />
					<attribute name="Implementation-Vendor" value="${copyright}" />
				</section>
			</manifest>
			<zipfileset src="${dist.dir}/${dist.kieker.main.jar}" />
			<zipfileset src="${org.eclipse.emf.common-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.ecore.xmi-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.ecore-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.common-jar}" fullpath="org.eclipse.emf.common-about.html" includes="about.html" />
			<zipfileset src="${org.eclipse.emf.ecore.xmi-jar}" fullpath="org.eclipse.emf.ecore.xmi-about.html" includes="about.html" />
			<zipfileset src="${org.eclipse.emf.ecore-jar}" fullpath="org.eclipse.emf.ecore-about.html" includes="about.html" />
			<fileset dir="${lib.dir}" includes="org.eclipse.emf.*.LICENSE" />
		</jar>
	</target>

	<target name="kieker-src-jar" description="Creates a Jar which contains the Kieker source code"> <!-- used by serenity --> 
		<jar destfile="${tmp.dir}/${src.jar}">
			<fileset dir="${src.kieker.common.dir}" />
			<fileset dir="${src.kieker.analysis.dir}" />
			<fileset dir="${build.kieker.analysis.model.dir}" />
			<fileset dir="${src.kieker.monitoring.dir}" />
			<fileset dir="${src.kieker.tools.dir}" />
			<fileset dir="." includes="${license.file}" />
		</jar>
	</target>

	<target name="dist-kieker-javadoc" depends="-init,-generate-javadoc" description="Packages the Javadoc API documentation archives">
		<tar destfile="${release.dir}/${dist.kieker.apiBaseName}.tar" longfile="gnu">
			<tarfileset dir="${build.api.dir}" prefix="" defaultexcludes="yes" />
		</tar>
		<gzip zipfile="${release.dir}/${dist.kieker.apiBaseName}.tar.gz" src="${release.dir}/${dist.kieker.apiBaseName}.tar" />
		<!-- tar file no longer needed -->
		<delete file="${release.dir}/${dist.kieker.apiBaseName}.tar" />

		<zip zipfile="${release.dir}/${dist.kieker.apiBaseName}.zip">
			<zipfileset dir="${build.api.dir}" prefix="" defaultexcludes="yes" />
		</zip>
	</target>

	<target name="dist-kieker-userguide" depends="-init,-build-userguide" description="Packages the Kieker user guide">
		<copy file="${src.userguide.pdf}" tofile="${release.dir}/${dist.kieker.userguide.pdf}" />
	</target>

	<target name="-generate-javadoc" depends="-init" description="Generate the Javadoc API documentation">
		<delete dir="${build.api.dir}" />
		<mkdir dir="${build.api.dir}" />
		<path id="javadoc-sourcepath">
			<dirset dir=".">
				<include name="${src.kieker.common.dir}" />
				<include name="${src.kieker.analysis.dir}" />
				<include name="${src.gen.kieker.analysis.dir}" />
				<include name="${src.kieker.monitoring.dir}" />
				<include name="${src.kieker.tools.dir}" />
			</dirset>
		</path>
		<javadoc sourcepathref="javadoc-sourcepath" destdir="${build.api.dir}" packagenames="kieker.*" access="public" author="true" version="false" use="true" doctitle="Kieker Monitoring and Analysis Framework, Vers. ${kieker.version}&lt;br/&gt;API Documentation" header="Kieker ${kieker.version}" footer="Kieker ${kieker.version}" bottom="Copyright ${year} ${copyright}, &lt;a href=&quot;http://kieker-monitoring.net&quot;&gt;http://kieker-monitoring.net&lt;/&gt;">
			<classpath refid="kieker.common-compile-classpath" />
			<classpath refid="kieker.analysis-compile-classpath" />
			<classpath refid="kieker.monitoring-compile-classpath" />
			<classpath refid="kieker.monitoring-ajc-compile-classpath" />
			<classpath refid="kieker.tools-compile-classpath" />
			<link href="http://docs.oracle.com/javase/1.5.0/docs/api/" />
			<tag name="generated" /> 
			<tag name="ordered" />
			<tag name="model" />
		</javadoc>
	</target>

	<target name="dist-kieker-sources" depends="-init" description="Packages the source archives (.zip|.tar.gz) for a release">
	  <echo message="${test.dir}/monitoring/kieker/test/monitoring/junit/probe/spring/executions/jetty/jetty.xml" />
	  <patternset id="dist_src_files-nonbinmode"> <!-- NOTE that the order of includes/excludes seems to have no effect. So be careful with excludes --> 
			<include name="${bin.dir}/log4j.properties" />
			<include name="${bin.dir}/*.bat" />
			<include name="${src.userguide.dir}/**/*" />
			<exclude name="${src.userguide.dir}/**/*.sh" /> <!-- will be added in bin mode -->
			<exclude name="META-INF/" /><!-- not required in source release release -->
			<include name="${src.dir}/**/*.java" />
			<include name="${src.dir}/**/META-INF/*" />
			<include name="${src.gen}/**/*.java" />
			<include name="${src.model.dir}/*.ecore" />
			<include name="${test.dir}/**/*.java" />
			<include name="${test.dir}/**/META-INF/*" />
			<include name="${test.dir}/monitoring/kieker/test/monitoring/junit/probe/spring/executions/jetty/jetty.xml" />
			<include name="${test.dir}/monitoring/kieker/test/monitoring/junit/probe/spring/executions/jetty/webapp/**" />
			<include name="${lib.dir}/**" />
			<include name="${examples.dir}/**/*" />
			<exclude name="${src.userguide.examples.dir}/**/lib/**/*" />
			<exclude name="${src.userguide.examples.dir}/**/**/*.jar" />
			<include name="${example.javaee.dir}/README" />
			<include name="${example.javaee.dir}/${license.file}" />
			<!-- (re-)enable as soon as existent <include name="${example.javaee.dir}/kieker-testdata/**" /> -->
			<include name="${example.javaee.jetty.dir}/**/*" />
			<exclude name="${example.javaee.jetty.dir}/logs/**/*" />
			<exclude name="${example.javaee.jetty.dir}/**/kieker*.jar" />
			<exclude name="${example.javaee.jetty.dir}/**/aspectj*.jar" />
			<include name=".checkstyle" />
			<include name=".classpath" />
			<include name=".pmd" />
			<include name=".project" />
			<include name="kieker-eclipse-cleanup.xml" />
			<include name="kieker-eclipse-formatter.xml" />
			<include name="build.xml" />
			<include name="build.properties" />
			<include name="${history.file}" />
			<include name="${license.file}" />
			<exclude name="**/build-eclipse/**" />
		</patternset>
		<patternset id="dist_src_files-binmode">
			<include name="${bin.dir}/**/*.sh" /> <!-- including subdirs (e.g., ${bin.dir}/dev/) here -->
			<include name="${src.userguide.dir}/**/*.sh" />
		</patternset>

		<tar destfile="${release.dir}/${dist.kieker.srcBaseName}.tar" longfile="gnu">
			<!-- ${kieker.dist.name}/META-INF/kieker.monitoring.properties not required in source release release! -->
			<tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
				<patternset refid="dist_src_files-nonbinmode" />
			</tarfileset>
			<tarfileset dir="." prefix="${kieker.dist.name}" filemode="755" defaultexcludes="yes">
				<patternset refid="dist_src_files-binmode" />
			</tarfileset>
		</tar>
		<gzip zipfile="${release.dir}/${dist.kieker.srcBaseName}.tar.gz" src="${release.dir}/${dist.kieker.srcBaseName}.tar" />
		<!-- tar file no longer needed -->
		<delete file="${release.dir}/${dist.kieker.srcBaseName}.tar" />

		<zip zipfile="${release.dir}/${dist.kieker.srcBaseName}.zip">
			<!-- ${kieker.dist.name}/META-INF/kieker.monitoring.properties not required in source release release! -->
			<zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
				<patternset refid="dist_src_files-nonbinmode" />
			</zipfileset>
			<zipfileset dir="." prefix="${kieker.dist.name}" filemode="755" defaultexcludes="yes">
				<patternset refid="dist_src_files-binmode" />
			</zipfileset>
		</zip>
	</target>

	<target name="dist-kieker-binaries" depends="build-all,-build-userguide,-build-userguide-examples" description="Packages the binary archives (.zip|.tar.gz) for a release">

		<patternset id="dist_bin_files-nonbinmode"> <!-- NOTE that the order of includes/excludes seems to have no effect. So be careful with excludes --> 
			<include name="${bin.dir}/log4j.properties" />
			<include name="${bin.dir}/*.bat" />
			<include name="${dist.dir}/*.jar" />
			<include name="${dist.dir}/*.war" />

			<include name="${lib.dir}/*" />
			<include name="${lib.sigar-native.dir}/*" />
			<include name="${history.file}" />
			<include name="${license.file}" />
			<include name="${src.userguide.dist.pdf}" />
			<include name="${examples.dir}/**/*" />
			<exclude name="${examples.dir}/**/*.sh" /> <!-- added in bin mode below -->
			<exclude name="${src.userguide.examples.dir}/**/lib/**/*" />
			<include name="${example.javaee.dir}/README" />
			<include name="${example.javaee.dir}/${license.file}" />
			<!-- (re-)enable as soon as existent <include name="${example.javaee.dir}/kieker-testdata/**" /> -->
			<include name="${example.javaee.jetty.dir}/**" />
			<exclude name="${example.javaee.jetty.dir}/logs/**/*" />
			<exclude name="${example.javaee.jetty.dir}/**/kieker*.jar" />
			<exclude name="${example.javaee.jetty.dir}/**/aspectj*.jar" />
			<exclude name="**/build-eclipse/**" />
		</patternset>
		<patternset id="dist_bin_files-binmode">
			<include name="${bin.dir}/*.sh" /> <!-- excluding subdirs (e.g., ${bin.dir}/dev/) here -->
			<include name="${examples.dir}/**/*.sh" />
		</patternset>

		<tar destfile="${release.dir}/${dist.kieker.binBaseName}.tar" longfile="gnu">
			<tarfileset file="${kieker.monitoring.default.properties}" fullpath="${kieker.dist.name}/META-INF/kieker.monitoring.properties" />
			<tarfileset file="${src.userguide.pdf}" fullpath="${kieker.dist.name}/doc/${dist.kieker.userguide.pdf}" />
			<tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
				<patternset refid="dist_bin_files-nonbinmode" />
			</tarfileset>
			<tarfileset dir="." prefix="${kieker.dist.name}" filemode="755" defaultexcludes="yes">
				<patternset refid="dist_bin_files-binmode" />
			</tarfileset>
			<tarfileset file="${kieker.monitoring.default.properties}" 
				    fullpath="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/classes/META-INF/kieker.monitoring.properties" />
			<tarfileset file="${dist.dir}/${dist.kieker.main.jar}" 
				    prefix="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/lib" />
			<tarfileset file="${lib.dir}/aspectjweaver-*" 
				    prefix="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/lib" />
		</tar>
		<gzip zipfile="${release.dir}/${dist.kieker.binBaseName}.tar.gz" src="${release.dir}/${dist.kieker.binBaseName}.tar" />
		<!-- tar file no longer needed -->
		<delete file="${release.dir}/${dist.kieker.binBaseName}.tar" />

		<zip zipfile="${release.dir}/${dist.kieker.binBaseName}.zip">
			<zipfileset file="${kieker.monitoring.default.properties}" fullpath="${kieker.dist.name}/META-INF/kieker.monitoring.properties" />
			<zipfileset file="${src.userguide.pdf}" fullpath="${kieker.dist.name}/doc/${dist.kieker.userguide.pdf}" />
			<zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
				<patternset refid="dist_bin_files-nonbinmode" />
			</zipfileset>
			<zipfileset dir="." prefix="${kieker.dist.name}" filemode="755" defaultexcludes="yes">
				<patternset refid="dist_bin_files-binmode" />
			</zipfileset>
			<zipfileset file="${kieker.monitoring.default.properties}" 
				    fullpath="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/classes/META-INF/kieker.monitoring.properties" />
			<zipfileset file="${dist.dir}/${dist.kieker.main.jar}" 
				    prefix="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/lib" />
			<zipfileset file="${lib.dir}/aspectjweaver-*" 
				    prefix="${kieker.dist.name}/${example.javaee.jetty.dir}/webapps/jpetstore/WEB-INF/lib" />
		</zip>
	</target>

	<target name="clean-userguide-examples" description="Removes artifacts from previous builds and manually changed configuration files">
		<ant antfile="build.xml" dir="${src.userguide.example.bookstore.dir}" target="clean" />
		<ant antfile="build.xml" dir="${src.userguide.example.manual.dir}" target="clean" />
		<ant antfile="build.xml" dir="${src.userguide.example.extended.dir}" target="clean" />
		<ant antfile="build.xml" dir="${src.userguide.example.aspectj.dir}" target="clean" />
		<ant antfile="build.xml" dir="${src.userguide.example.jms.dir}" target="clean" />
		<ant antfile="build.xml" dir="${src.userguide.example.sigar.dir}" target="clean" />
		<copy file="${kieker.monitoring.default.properties}" tofile="${src.userguide.example.aspectj.dir}/META-INF/kieker.monitoring.properties" />
	</target>

	<target name="-build-userguide-examples" depends="-init,build-all,clean-userguide-examples" description="Builds all userguide examples">
		<path id="classpath">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
			<fileset dir="${dist.dir}" includes="${dist.kieker.main.jar}" />
		</path>
		<!-- src.userguide.example.bookstore.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.bookstore.dir}">
			<reference refid="classpath" />
			<target name="build-jar" />
		</ant>
		<!-- src.userguide.example.manual.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.manual.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.manual.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
		<!-- src.userguide.example.extended.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.extended.dir}">
			<reference refid="classpath" />
			<target name="-build-jar" />
		</ant>
		<!-- src.userguide.example.aspectj.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.aspectj.dir}">
			<reference refid="classpath" />
			<target name="-build-jar" />
		</ant>
		<!-- src.userguide.example.jms.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.jms.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.jms.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
		<!-- src.userguide.example.sigar.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.sigar.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.sigar.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
	</target>
	
	<target name="-update-version.examples" depends="-init-version" description="Updates the Kieker version in the examples (e.g., in the .classpath files)">
		<replaceregexp match="kieker-\S*.jar" replace="${dist.kieker.main.aspectj.jar}" flags="g">
		<fileset dir="${example.microbenchmark.dir}/bin/">
			<include name="*.sh" />
		 </fileset>
		</replaceregexp>
		
		<replaceregexp file="${src.userguide.example.bookstore.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.bookstore.dir}/README.txt" match="kieker-\S*.jarr" replace="${dist.kieker.main.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.manual.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.emf.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.manual.dir}/README.txt" match="kieker-\S*.jar" replace="${dist.kieker.main.emf.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.extended.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.emf.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.extended.dir}/README.txt" match="kieker-\S*.jar" replace="${dist.kieker.main.emf.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.aspectj.dir}/build.properties" match="kieker-\S*.jar" replace="${dist.kieker.main.aspectj.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.aspectj.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.aspectj.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.aspectj.dir}/README.txt" match="kieker-\S*.jar" replace="${dist.kieker.main.aspectj.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.jms.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.jar}" flags="g" />
		<replaceregexp file="${src.userguide.example.sigar.dir}/.classpath" match="kieker-\S*.jar" replace="${dist.kieker.main.jar}" flags="g" />
	</target>

	<target name="dist-examples" depends="-update-version.examples" description="Packages the example archives (.zip|.tar.gz) for a release">

	</target>

	<target name="-build-userguide" description="Creates the Kieker user guide PDF from the LaTeX sources">
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\version\}\{.*\}" replace="newcommand\{\\\\\\version\}\{${kieker.version}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJar\}\{.*\}" replace="newcommand\{\\\\\\mainJar\}\{${dist.kieker.main.jar}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJarEMF\}\{.*\}" replace="newcommand\{\\\\\\mainJarEMF\}\{${dist.kieker.main.emf.jar.latex}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJarWeaver\}\{.*\}" replace="newcommand\{\\\\\\mainJarWeaver\}\{${dist.kieker.main.aspectj.jar.latex}\}" flags="g" />
		<exec executable="make" failonerror="true">
			<arg value="-C" />
			<arg value="${src.userguide.dir}" />
		</exec>
	</target>

	<target name="release" depends="build-all,dist-kieker-sources,dist-kieker-binaries,dist-kieker-javadoc,dist-examples,dist-kieker-userguide" description="Packages the release files (calling all dist- targets)">
		<echo message="Sourceforge release instructions can be found at:" />
		<echo message="https://sourceforge.net/apps/trac/sourceforge/wiki/Release files for download#Createoreditarelease" />
		<echo message="" />
		<echo message="Note that this target executes only on platforms having 'make' and 'sh' installed" />
		<echo message="Also, in order to run with the source archive, you'll additionally need to extract the 'kieker-${kieker.version}_examples-JavaEEServletContainerExample'.{zip|tar.gz} archive" />

		<echo message="Checking release archives ..." /> 
		<exec executable="${tests.release-script.sh}" failonerror="true">
			<arg value="-C" />
			<arg value="." />
		</exec>
	</target>

	<target name="clean" description="Removes artifacts from previous builds">
		<!-- <delete dir="tmp"/>-->
		<delete dir="${dist.dir}" />
		<delete dir="${release.dir}" />
		<delete dir="${build.dir}" />
	</target>

	<target name="run-test-storage" depends="-compile-tests-monitoring" description="Runs a simple storage test">
		<echo>
            This is a small test for the part of Kieker that
            stores monitoring data. Kieker's monitoring API
            is manually invoked to collect monitoring data.
            Therefore, the instrumentation and logic in the
            monitoring points (the aspects) of Kieker is not
            used.

            The main purpose of this test is to isolate configuration and
            installation problems and to get Kieker running.

            If in kieker.monitoring.properties file system storage (store in database =
            false) is selected, a new file (kieker*.dat) with monitoring data
            should be created in the folder specified in kieker.monitoring.properties
            (default: /tmp).
        </echo>

		<path id="kieker.test-storage-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.manualInstrumentation.storageOnly.StorageOnly" classpathref="kieker.test-storage-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="-compile-tests-common" depends="build-kieker.main" description="Compiles the tests for common classes">
		<path id="common-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="junit-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>
		<javac source="1.5" target="1.5" destDir="${build.tests.dir}" classpathref="common-test-compile-classpath" srcdir="${test.kieker.common.dir}" includeAntRuntime="false">
		</javac>
	</target>

	<target name="-compile-tests-monitoring" depends="-compile-tests-common,build-kieker.main,build-kieker.main.aspectj" description="Compiles the tests for the Kieker.Monitoring component">
		<path id="monitoring-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="junit-*.jar" />
				<include name="aopalliance-*.jar" />
				<include name="org.springframework.beans-*.jar" />
				<include name="org.springframework.context-*.jar" />
				<include name="org.springframework.core-*.jar" />
				<include name="org.springframework.web-*.jar" />
				<include name="cxf-*.jar" />
				<include name="geronimo-ws-metadata_2.0_spec-*.jar" /> <!-- needed for the cxf tests -->
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>
		<copy file="${kieker.monitoring.test.properties}" tofile="${build.tests.dir}/META-INF/kieker.monitoring.test.properties" overwrite="true" />
		<javac source="1.5" target="1.5" destDir="${build.tests.dir}" classpathref="monitoring-test-compile-classpath" srcdir="${test.kieker.monitoring.dir}" excludes="kieker/test/monitoring/aspectj/compileTimeWeaving/" includeAntRuntime="false">
		</javac>
	</target>

	<target name="-compile-tests-analysis" depends="-compile-tests-common,build-kieker.main,build-kieker.main.emf" description="Compiles the tests for the Kieker.Analysis component">
		<path id="analysis-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="junit-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>
		<javac source="1.5" target="1.5" destDir="${build.tests.dir}" classpathref="analysis-test-compile-classpath" srcdir="${test.kieker.analysis.dir}" includeAntRuntime="false">
		</javac>
	</target>

	<target name="-compile-tests-tools" depends="build-kieker.main" description="Compiles the tests for the Kieker tools">
		<path id="tools-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="junit-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>
		<javac source="1.5" target="1.5" destDir="${build.tests.dir}" classpathref="tools-test-compile-classpath" srcdir="${test.kieker.tools.dir}" includeAntRuntime="false">
		</javac>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreDifferentRecordTypes" depends="-compile-tests-monitoring" description="Runs a load-time weaving test with different record types">
		<path id="kieker.test-loadTimeWeaving-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.annotation}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore" classpathref="kieker.test-loadTimeWeaving-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<!--<jvmarg value="-Dorg.aspectj.weaver.loadtime.configuration=META-INF/aop.xml"/>-->
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreFullInstrumentation" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests with full instrumentation">
		<path id="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA" classpathref="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-executionOrderTest" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests for eoi/ess information">
		<path id="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.executionOrderTest.ExecutionOrderTest" classpathref="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreDifferentRecordTypes-events" depends="-compile-tests-monitoring" description="Runs a load-time weaving test with different record types">
		<path id="kieker.test-loadTimeWeaving-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.annotation}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore" classpathref="kieker.test-loadTimeWeaving-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<!--<jvmarg value="-Dorg.aspectj.weaver.loadtime.configuration=META-INF/aop.xml"/>-->
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreFullInstrumentation-events" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests with full instrumentation">
		<path id="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA" classpathref="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-executionOrderTest-events" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests for eoi/ess information">
		<path id="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.executionOrderTest.ExecutionOrderTest" classpathref="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="-compile-tests-compileTimeWeaving-bookstore" depends="-compile-kieker.monitoring" description="Compiles the sources of the compile-time-weaving tests">
		<path id="kieker.test-compileTimeWeaving-bookstore-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjrt-*.jar" />
				<include name="javax.servlet-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<delete dir="${tmp.dir}/aspects/" />
		<mkdir dir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/AbstractOperationExecutionAspect.java" todir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/AbstractOperationExecutionAspectServlet.java" todir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/${TestAspect}" todir="${tmp.dir}/aspects/" />
		<iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true" classpathref="kieker.test-compileTimeWeaving-bookstore-compile-classpath">
			<sourceroots>
				<pathelement location="${test.kieker.monitoring.dir}/kieker/test/monitoring/aspectj/compileTimeWeaving/bookstore/" />
				<pathelement location="${tmp.dir}/aspects/" />
			</sourceroots>
		</iajc>
	</target>

	<target name="-compile-tests-compileTimeWeaving-twoConcurrentMethodsExample" depends="-compile-kieker.monitoring" description="Compiles the sources of the compile-time-weaving test with concurrency">
		<path id="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjrt-*.jar" />
				<include name="javax.servlet-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<delete dir="${tmp.dir}/aspects/" />
		<mkdir dir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/AbstractOperationExecutionAspect.java" todir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/AbstractOperationExecutionAspectServlet.java" todir="${tmp.dir}/aspects/" />
		<copy file="${src.kieker.monitoring.dir}/kieker/monitoring/probe/aspectj/operationExecution/${TestAspect}" todir="${tmp.dir}/aspects/" />
		<iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true" classpathref="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-compile-classpath">
			<sourceroots>
				<pathelement location="${test.kieker.monitoring.dir}/kieker/test/monitoring/aspectj/compileTimeWeaving/twoConcurrentMethodsExample/" />
				<pathelement location="${tmp.dir}/aspects/" />
			</sourceroots>
		</iajc>
	</target>

	<target name="run-test-compileTimeWeaving-bookstore" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-bookstore" description="Runs a simple compile-time-weaving test">
		<path id="kieker.test-compileTimeWeaving-bookstore-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.bookstore.Bookstore" classpathref="kieker.test-compileTimeWeaving-bookstore-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="run-test-compileTimeWeaving-bookstore-synchronized" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-bookstore" description="Runs a compile-time-weaving test with a synchronized method">
		<echo message="Using Bookstore variant with synchronized Catalog.getBooks (is slower)." />

		<path id="kieker.test-compileTimeWeaving-bookstore-synchronized-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.bookstore.synchron.Bookstore" classpathref="kieker.test-compileTimeWeaving-bookstore-synchronized-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="run-test-compileTimeWeaving-twoConcurrentMethodsExample" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-twoConcurrentMethodsExample" description="Runs a compile-time-weaving test with concurrency">
		<path id="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.twoConcurrentMethodsExample.Starter" classpathref="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="compile-tests" depends="-compile-tests-common,-compile-tests-analysis,-compile-tests-monitoring,-compile-tests-tools" description="Compile the tests for the Kieker components" />

	<target name="run-tests-integration" depends="run-test-compileTimeWeaving-bookstore, run-test-compileTimeWeaving-bookstore-synchronized, run-test-compileTimeWeaving-twoConcurrentMethodsExample, run-test-loadTimeWeaving-bookstoreDifferentRecordTypes, run-test-loadTimeWeaving-bookstoreFullInstrumentation, run-test-loadTimeWeaving-executionOrderTest, run-test-storage" description="Runs the collection of integration tests (takes quite a while)">
	</target>

	<target name="run-tests-junit" depends="compile-tests,kieker-src-jar" description="Runs the JUnit tests">
		<path id="kieker.test-junit-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aopalliance-*.jar" />
				<include name="aspectjweaver-*.jar" /> <!-- needed for the spring tests -->
				<include name="junit-*.jar" />
				<include name="org.eclipse.emf.*.jar" />
				<include name="derby-*.jar" />
				<include name="javax.servlet-*.jar" /> <!-- needed for the cxf, spring? tests -->
				<include name="cxf-*.jar" /> <!-- needed for the cxf tests -->
				<include name="xmlschema-core-*.jar" /> <!-- needed for the cxf tests -->
				<include name="neethi-*.jar" /> <!-- needed for the cxf tests -->
				<include name="wsdl4j-*.jar" /> <!-- needed for the cxf tests -->
				<include name="org.springframework*.jar" /> <!-- needed for the spring tests -->
				<include name="commons-logging-*.jar" /> <!-- needed for the spring tests -->
				<include name="geronimo-ws-metadata_*_spec-*.jar" /> <!-- needed for the cxf tests -->
				<include name="geronimo-jaxws_*_spec-*.jar" /> <!-- needed for the cxf tests -->
				<include name="geronimo-jaxws_*_spec-*.jar" /> <!-- needed for the cxf tests -->
				<include name="jaxb-api-*.jar" /> <!-- needed for the cxf tests -->
				<include name="jaxb-impl-*.jar" /> <!-- needed for the cxf tests -->
				<include name="stax-*.jar" /> <!-- needed for the cxf tests -->
				<include name="javaee-api-*.jar" /> <!-- needed for the cxf tests --> 
			</fileset>
			<fileset dir="${example.javaee.jetty.lib.dir}">
				<include name="jetty-*.jar" /> <!-- needed for the cxf, spring tests -->
			</fileset>
			<fileset dir="${example.javaee.jpetstore.lib.dir}">
				<include name="asm-*.jar" /> <!-- needed for the spring tests -->
				<include name="cglib-*.jar" /> <!-- needed for the spring tests -->
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<delete dir="${tests.junit-results.dir}" />
		<mkdir dir="${tests.junit-results.dir}" />

		<junit fork="false" printsummary="yes">
			<classpath refid="kieker.test-junit-run-classpath" />

			<formatter type="xml" />

			<!-- Serenity system properties. -->
			<!-- Serenity deactivated
			<sysproperty key="included.packages" value="kieker" />
			<sysproperty key="included.adapters" value="coverage,complexity,dependency" />
			<sysproperty key="included.jars" value="${tmp.dir}/${src.jar}" />
			-->
			<!-- Serenity JVM command line. -->
			<!-- Serenity deactivated
			<jvmarg line="-javaagent:${lib.dir}/serenity-0.4/serenity.jar" />
			-->

			<batchtest fork="true" todir="${tests.junit-results.dir}">
				<fileset dir="${build.tests.dir}/">
					<include name="**/junit/**/*Test*.class" />
					<exclude name="**/junit/**/Abstract*.class" />
					<exclude name="**/*$*.class" />
				</fileset>
			</batchtest>
		</junit>

		<antcall target="-test.junit.report" />
	</target>

	<target name="-test.junit.report" depends="" description="Creates the report for the JUnit tests">
		<mkdir dir="${tests.junit-results.dir}/report" />
		<junitreport todir="${tests.junit-results.dir}/report">
			<fileset dir="${tests.junit-results.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${tests.junit-results.dir}/report" />
		</junitreport>

		<echo message="To see the test report, open ${tests.junit-results.dir}/report/index.html in your Web browser." />
	</target>

	<!-- http://samoa.informatik.uni-kiel.de/kieker/trac/ticket/292: add run-tests-integration BEFORE static-analysis -->
	<target name="run-hudson-kieker" depends="build-all,run-tests-junit,static-analysis" description="Ant target used by the Hudson build (includes run-tests-junit,run-tests-integration,static-analysis)" />

	<target name="static-analysis" depends="findbugs, pmd, checkstyle" description="Performs static analysis of Kieker's source and binary code employing FindBugs and PMD" />

	<target name="findbugs" depends="build-all,compile-tests" description="Performs a byte code analysis to find potential bugs employing findbugs">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${lib.dir}/findbugs-2.0.1/lib/findbugs-ant.jar" />
		<findbugs home="${lib.dir}/findbugs-2.0.1" reportLevel="low" effort="max" maxRank="20" excludeFilter="${lib.dir}/findbugs-2.0.1/fb-filter.xml" output="xml" outputFile="${tmp.dir}/kieker-fb.xml">
			<auxClasspath>
				<fileset dir="${lib.dir}" includes="*.jar" />
				<fileset dir="${lib.dir}/findbugs-2.0.1/auxlib" includes="*.jar" />
			</auxClasspath>
			<sourcePath path="${src.dir}" />
			<sourcePath path="${test.dir}" />
			<class location="${build.dir}" />
		</findbugs>
	</target>

	<target name="pmd" depends="build-all,compile-tests" description="Performs a source code analysis employing PMD">
		<path id="pmd.libs">
			<fileset dir="${lib.dir}/pmd-5.0.0/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.libs" />
		<pmd shortFilenames="true" rulesetfiles="${lib.dir}/pmd-5.0.0/pmdrules.xml">
		  <version>java 1.5</version>
			<formatter type="xml" toFile="${tmp.dir}/pmd_report.xml" />
			<fileset dir="${src.dir}" includes="**/*.java" />
			<fileset dir="${test.dir}" includes="**/*.java" />
		</pmd>
		<echo message="PMD report written to '${tmp.dir}/pmd_report.xml'" />
	</target>

	<target name="checkstyle" depends="build-all,compile-tests" description="Uses Checkstyle to find potential problems">
		<taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-5.5/lib/checkstyle-5.5-all.jar" />
		<checkstyle config="${lib.dir}/checkstyle-5.5/cs-conf.xml" failOnViolation="false">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${dist.dir}">
					<include name="${dist.kieker.main.jar}" />
				</fileset>
			</classpath>
			<fileset dir="${src.dir}" includes="**/*.java" />
			<fileset dir="${test.dir}" includes="**/*.java" />
			<formatter type="xml" toFile="${tmp.dir}/cs_report.xml" />
		</checkstyle>
		<echo message="Checkstyle report written to '${tmp.dir}/cs_report.xml'" />
	</target>
</project>
