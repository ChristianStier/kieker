<?xml version="1.0" encoding="UTF-8"?>
<project name="Kieker" default="build-all" basedir="." xmlns:artifact="urn:maven-artifact-ant">
    <property file="build.properties"/>

    <property name="KiekerTpmonTestAspect"
              value="KiekerTpmonExecutionProbeAnnotationRemote.java"/>

    <path id="classpath.libs">
        <pathelement path="${classpath}"/>
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="."/>
    </path>
	
    <path id="pmd.libs">
        <fileset dir="lib/pmd">
            <include name="*.jar"/>
        </fileset>
    </path>	

    <target name="init-version">
        <tstamp/>
        <!-- Names of the kieker.monitoring runtime libraries that will be created
	     by the build process: -->
        <property name="kieker.version"
                  value="1.1-refactoring-branch"/> <!-- -20090716-1022 -->
        <property name="kieker.dist.name"
                  value="${kieker.packagenamebase}-${kieker.version}"/>
        <property name="kieker.monitoring.dist.name"
                  value="${kieker.kieker.monitoring.packagenamebase}-${kieker.version}"/>
        <property name="kieker.analysis.dist.name"
                  value="${kieker.kieker.analysis.packagenamebase}-${kieker.version}"/>
        <property name="common.dist.name"
                  value="${kieker.common.packagenamebase}-${kieker.version}"/>
        <property name="tools.dist.name"
                  value="${kieker.tools.packagenamebase}-${kieker.version}"/>
        <property name="dist.kieker.monitoring.ltw"
                  value="${kieker.monitoring.dist.name}_${kieker-monitoring-ltwjar.suffix}.jar"/>
        <property name="dist.kieker.monitoring.ctw"
                  value="${kieker.monitoring.dist.name}_${kieker-monitoring-ctwjar.suffix}.jar"/>
        <property name="dist.kieker.monitoring.ctrl"
                  value="${kieker.monitoring.dist.name}_${kieker-monitoring-ctrljar.suffix}.jar"/>
        <property name="dist.kieker.monitoring.controlServlet"
                  value="${kieker.monitoring.dist.name}_${kieker-monitoring-controlServletwar.suffix}.war"/>
        <property name="dist.kieker.common"
                  value="${common.dist.name}.jar"/>
        <property name="dist.kieker.tools"
                  value="${tools.dist.name}.jar"/>
        <property name="dist.kieker.analysis.ctrl"
                  value="${kieker.analysis.dist.name}_${kieker-analysis-ctrljar.suffix}.jar"/>
        <property name="dist.kieker.srcBaseName"
                  value="${kieker.dist.name}_${kieker-src.suffix}"/>
        <property name="dist.kieker.binBaseName"
                  value="${kieker.dist.name}_${kieker-bin.suffix}"/>
        <property name="dist.kieker.example.myexample"
                  value="${kieker.dist.name}_${kieker-examples.suffix}-MySimpleKiekerExample"/>
        <property name="dist.kieker.example.myjmsexample"
                  value="${kieker.dist.name}_${kieker-examples.suffix}-MySimpleKiekerJMSExample"/>
        <property name="dist.kieker.example.jpetstore"
                  value="${kieker.dist.name}_${kieker-examples.suffix}-JPetStoreExample"/>
        <property name="dist.kieker.example.microbenchmark"
                  value="${kieker.dist.name}_${kieker-examples.suffix}-OverheadEvaluationMicrobenchmark"/>
    </target>

    <target name="update-version" unless="version.noupdate"
            depends="init-version">
        <echo>Updating version string</echo>
        <replaceregexp file="src/kieker/monitoring/core/Version.java"
                       match="VERSION = &quot;.*?&quot;"
                       replace="VERSION = &quot;${kieker.version}-${DSTAMP}&quot;"/>
        <replaceregexp match="&lt;version&gt;.*?&lt;/version&gt;"
                       replace="&lt;version&gt;${kieker.version}-${DSTAMP}&lt;/version&gt;">
            <fileset dir=".">
                <include name="pom_ant_kieker*.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="build-all"
            depends="clean,init,build-kieker.monitoring-ctw,build-kieker.monitoring-ltw,build-kieker.monitoring-ctrl,build-kieker.monitoring-control-servlet,build-kieker.common,build-kieker.analysis-ctrl,build-kieker.tools">
    </target>

    <condition property="no.kieker.analysis.properties">
        <not>
            <available file="${kieker.analysis.properties}"/>
        </not>
    </condition>

    <target name="init-kieker.analysis-properties" if="no.kieker.analysis.properties">
        <!-- if no kieker.analysis.properties, copy example file automatically  -->
        <echo message="${kieker.analysis.properties} not existing.
                       Creating default file."/>
        <copy file="${kieker.analysis.properties.example}" tofile="${kieker.analysis.properties}"/>
    </target>

    <condition property="no.kieker.monitoring.properties">
        <not>
            <available file="${kieker.monitoring.properties}"/>
        </not>
    </condition>

    <target name="init-kieker.monitoring-properties" if="no.kieker.monitoring.properties">
        <!-- if no kieker.monitoring.properties, copy example file automatically  -->
        <echo message="${kieker.monitoring.properties} not existing.
                       Creating default file."/>
        <copy file="${kieker.monitoring.properties.example}" tofile="${kieker.monitoring.properties}"/>
    </target>

    <target name="init-properties"
            depends="init-kieker.monitoring-properties,init-kieker.analysis-properties,init-log4-properties-tests">
    </target>

    <target name="init" depends="update-version,init-properties">
        <!-- Register special aspectJ commands in ant - allow ant to use special AspectJ commands: -->
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" classpath="${aspectjtoolsjar}"/>
        <fail message="Critical error: AspectJ library not found
                       in ${aspectjtoolsjar}. 
                       Check your build.properties.">
            <condition>
                <not>
                    <available file="${aspectjtoolsjar}"/>
                </not>
            </condition>
        </fail>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${build.tests.dir}"/>
        <mkdir dir="tmp"/>

        <!-- Classpath with Kieker Ctrl and external libs  -->
        <path id="kieker.monitoring.core.classpath">
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.kieker.monitoring.ctrl}"/>
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <!-- Classpath with kieker.common and external libs  -->
        <path id="kieker.common.classpath">
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <!-- Classpath with kieker.analysis and external libs  -->
        <path id="kieker.analysis.core.classpath">
            <fileset dir="kieker.analysis-plugins"> <!-- this has to be before! the other libs follow!, else wired javafx errors might occure on com.sun.scenario.scenegraph.SGGroup -->
                    <include name="**/*.jar"/>
            </fileset>
            <path refid="classpath.libs"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.kieker.analysis.ctrl}"/>
                <include name="${dist.kieker.common}"/>
            </fileset>
        </path>

        <path id="run.tests.classpath">
            <path refid="kieker.monitoring.core.classpath"/>
            <pathelement location="${build.tests.dir}/"/>
        </path>
    </target>

    <!-- build a kieker.monitoring package that doesn't contain the aspect code (for direct invocation of kieker.monitoring) -->
    <target name="build-kieker.monitoring-ctrl" depends="init,build-kieker.common">
        <delete dir="${build.kieker.monitoring.ctrl.dir}"/>
        <mkdir  dir="${build.kieker.monitoring.ctrl.dir}"/>
        <mkdir  dir="${build.kieker.monitoring.ctrl.dir}/META-INF"/>
        <echo message="Creating the library of kieker.monitoring (${dist.kieker.monitoring.ctrl}) that is supposed for direct invocations - it doesn't contain the AOP instrumentation mechanisms."/>
        <javac destDir="${build.kieker.monitoring.ctrl.dir}"
               source="1.5"
        	   target="1.5"
               srcdir="src"
               debug="true"
               classpathref="classpath.libs">
            <compilerarg value="-Xlint:all,-path"/>
            <include name="kieker/monitoring/annotation/**"/>
            <include name="kieker/monitoring/core/**"/>
            <include name="kieker/monitoring/writer/**"/>
            <include name="kieker/monitoring/probe/IMonitoringProbe.java"/>
        </javac>
        <copy file="${kieker.monitoring.properties.example}" tofile="${build.kieker.monitoring.ctrl.dir}/META-INF/kieker.monitoring.properties.default"/>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.monitoring.ctrl.dir}/">
            <fileset dir="src">
                <include name="kieker/monitoring/annotation/**/*.java"/>
                <include name="kieker/monitoring/core/**/*.java"/>
                <include name="kieker/monitoring/writer/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.monitoring.ctrl}">
            <fileset dir="${build.kieker.monitoring.ctrl.dir}"/>
        </jar>
    </target>

    <target name="build-kieker.monitoring-ltw" depends="init,build-kieker.monitoring-ctrl">
        <delete dir="${build.kieker.monitoring.ltw.dir}"/>
        <mkdir dir="${build.kieker.monitoring.ltw.dir}"/>
        <echo message="Creating the load-time-weaving library of kieker.monitoring (${dist.kieker.monitoring.ltw})."/>
        <!-- <iajc destDir="${build.kieker.monitoring.ltw.dir}"
              source="1.5"
        	  target="1.5"
              verbose="off"
              srcdir="src/kieker/monitoring/probe/aspectJ"
              debug="true"
              classpathref="kieker.monitoring.core.classpath">
        </iajc> -->
        <javac destDir="${build.kieker.monitoring.ltw.dir}"
               source="1.5"
        	   target="1.5"
               verbose="off"
               srcdir="src/kieker/monitoring/probe/"
               debug="true"
               classpathref="kieker.monitoring.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
            <!--<exclude name="kieker/monitoring/probe/aspectJ/**"/>-->
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.monitoring.ltw.dir}/">
            <fileset dir="src">
                <include name="kieker/monitoring/probe/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.monitoring.ltw}">
            <fileset dir="${build.kieker.monitoring.ltw.dir}"/>
        </jar>
    </target>
    
    <target name="build-kieker.monitoring-ctw" depends="init,build-kieker.monitoring-ctrl">
        <delete dir="${build.kieker.monitoring.ctw.dir}"/>
        <mkdir  dir="${build.kieker.monitoring.ctw.dir}"/>
        <echo message="Creating the compile-time-weaving library of kieker.monitoring (${dist.kieker.monitoring.ctw}). This library can be used in two ways: 1) for compile time instrumentation 2) via the kieker.monitoring API - if you want to invoke kieker.monitoring manually. This library cannot be used for load-time-weaving with the javaagent property!"/>
        <javac destDir="${build.kieker.monitoring.ctw.dir}"
               source="1.5"
        	   target="1.5"
               verbose="off"
               srcdir="src/kieker/monitoring/probe/aspectJ/"
               debug="true"
               classpathref="kieker.monitoring.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.monitoring.ctw.dir}/">
            <fileset dir="src">
                <include name="kieker/monitoring/probe/aspectJ/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.monitoring.ctw}">
            <fileset dir="${build.kieker.monitoring.ctw.dir}"/>
        </jar>
    </target>

    <target name="build-kieker.monitoring-control-servlet" depends="init,build-kieker.monitoring-ctrl">
        <delete dir="${build.kieker.monitoring.controlServlet.dir}"/>
        <mkdir dir="${build.kieker.monitoring.controlServlet.dir}"/>
        <javac source="1.5" target="1.5"
               destDir="${build.kieker.monitoring.controlServlet.dir}"
               classpathref="kieker.monitoring.core.classpath"
               srcdir="src/kieker/monitoring/controlServlet"
               debug="true"/>
        <!-- We want to include the sources in this war -->
        <copy todir="${build.kieker.monitoring.controlServlet.dir}/">
            <fileset dir="src">
                <include name="kieker/monitoring/controlServlet/**/*.java"/>
            </fileset>
        </copy>
        <war destfile="${dist.dir}/${dist.kieker.monitoring.controlServlet}" webxml="src/kieker/monitoring/controlServlet/WEB-INF/web.xml">
            <classes dir="${build.kieker.monitoring.controlServlet.dir}"/>
            <zipfileset dir="src/kieker/monitoring/controlServlet/images" prefix="images"/>
        </war>
    </target>

    <!-- Build kieker.analysis  -->
    <target name="build-kieker.analysis-ctrl" depends="init,build-kieker.common">
        <delete dir="${build.kieker.analysis.ctrl.dir}"/>
        <mkdir  dir="${build.kieker.analysis.ctrl.dir}"/>
        <mkdir  dir="${build.kieker.analysis.ctrl.dir}/META-INF"/>
        <echo message="Creating the library of kieker.analysis (${dist.kieker.analysis.ctrl})."/>
        <javac destDir="${build.kieker.analysis.ctrl.dir}"
               source="1.5" target="1.5"
               srcdir="src/kieker/analysis/"
               debug="true"
               classpathref="kieker.common.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <copy file="${kieker.analysis.properties}" todir="${build.kieker.analysis.ctrl.dir}/META-INF"/>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.analysis.ctrl.dir}/">
            <fileset dir="src">
                <include name="kieker/analysis/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.analysis.ctrl}">
            <fileset dir="${build.kieker.analysis.ctrl.dir}"/>
        </jar>
    </target>

    <!-- Build kieker.common  -->
    <target name="build-kieker.common" depends="init">
        <delete dir="${build.kieker.common.dir}"/>
        <mkdir  dir="${build.kieker.common.dir}"/>
        <mkdir  dir="${build.kieker.common.dir}/META-INF"/>
        <echo message="Creating the library of kieker.common (${dist.kieker.common})."/>
        <javac destDir="${build.kieker.common.dir}"
               source="1.5" target="1.5"
               srcdir="src/kieker/common/"
               debug="true"
               classpathref="kieker.monitoring.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.common.dir}/">
            <fileset dir="src">
                <include name="kieker/common/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.common}">
            <fileset dir="${build.kieker.common.dir}"/>
        </jar>
    </target>

    <!-- Build kieker.tools  -->
    <target name="build-kieker.tools" depends="init,build-kieker.common,build-kieker.monitoring-ctrl,build-kieker.analysis-ctrl">
        <delete dir="${build.kieker.tools.dir}"/>
        <mkdir  dir="${build.kieker.tools.dir}"/>
        <mkdir  dir="${build.kieker.tools.dir}/META-INF"/>
        <echo message="Creating the library of kieker.tools (${dist.kieker.tools})."/>
        <javac destDir="${build.kieker.tools.dir}"
               source="1.5" target="1.5"
               srcdir="src/kieker/tools/"
               debug="true"
               classpathref="kieker.monitoring.core.classpath">
            <compilerarg value="-Xlint:all,-path"/>
         <classpath> <!-- includes kieker/monitoring/probe/manual -->
                <pathelement location="${dist.dir}/${dist.kieker.analysis.ctrl}"/>
            </classpath>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.kieker.tools.dir}/">
            <fileset dir="src">
                <include name="kieker/tools/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${dist.kieker.tools}">
            <fileset dir="${build.kieker.tools.dir}"/>
        </jar>
    </target>

    <target name="build-kieker.monitoring-sources" depends="init">
        <patternset id="dist_src_files">
            <include name="bin/*.sh"/>
            <include name="bin/log4j.properties"/>
            <include name="META-INF/*.example"/>
	    <include name="${aop.xml.ltwtests.annotation}"/>
	    <include name="${aop.xml.ltwtests.noannotation}"/>
            <include name="src/**/*.java"/>
            <include name="src/kieker/monitoring/controlServlet/WEB-INF/web.xml"/>
            <include name="src/kieker/monitoring/controlServlet/images/**"/>
            <include name="lib/**"/>
            <include name="build.xml"/>
            <include name="build.properties"/>
            <include name="RELEASENOTES"/>
            <include name="ISSUES"/>
            <include name="HISTORY"/>
	    <include name="pom_ant_kieker-*.xml"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.srcBaseName}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_src_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.srcBaseName}.tar.gz" src="${release.dir}/${dist.kieker.srcBaseName}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.srcBaseName}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.srcBaseName}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_src_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-kieker.monitoring-binaries" depends="build-all">
	    <echo message="${dist.dir}/${dist.kieker.monitoring.ltw}"/>
        <patternset id="dist_bin_files">
            <include name="bin/*.sh"/>
            <include name="bin/log4j.properties"/>
            <include name="dist/*.jar"/>
            <include name="dist/*.war"/>
            <include name="META-INF/*.example"/>
            <include name="lib/**"/>
            <include name="RELEASENOTES"/>
            <include name="ISSUES"/>
            <include name="HISTORY"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.binBaseName}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_bin_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.binBaseName}.tar.gz" src="${release.dir}/${dist.kieker.binBaseName}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.binBaseName}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.binBaseName}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_bin_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-example-MySimpleKiekerExample" depends="init">
	    <echo message="${dist.dir}/${dist.kieker.example.myexample}"/>
        <patternset id="dist_myExample_files">
            <include name="examples/MySimpleKiekerExample/README"/>
            <include name="examples/MySimpleKiekerExample/build.xml"/>
            <include name="examples/MySimpleKiekerExample/build.properties"/>
            <include name="examples/MySimpleKiekerExample/lib/"/>
            <include name="examples/MySimpleKiekerExample/kieker-testdata/**"/>
            <exclude name="examples/MySimpleKiekerExample/lib/*.jar"/>
            <include name="examples/MySimpleKiekerExample/META-INF/ltwtests-RTs.aop.xml"/>
            <include name="examples/MySimpleKiekerExample/META-INF/ltwtests-RTsExecutions.aop.xml"/>
            <include name="examples/MySimpleKiekerExample/META-INF/ltwtests-executions.aop.xml"/>
            <include name="examples/MySimpleKiekerExample/META-INF/tests.log4j.properties"/>
            <include name="examples/MySimpleKiekerExample/META-INF/kieker.monitoring.properties.example"/>
            <include name="examples/MySimpleKiekerExample/src/**"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.example.myexample}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_myExample_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.example.myexample}.tar.gz" src="${release.dir}/${dist.kieker.example.myexample}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.example.myexample}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.example.myexample}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_myExample_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-example-MySimpleKiekerJMSExample" depends="init">
	    <echo message="${dist.dir}/${dist.kieker.example.myjmsexample}"/>
        <patternset id="dist_myJMSExample_files">
            <include name="examples/MySimpleKiekerJMSExample/README"/>
            <include name="examples/MySimpleKiekerJMSExample/build.xml"/>
            <include name="examples/MySimpleKiekerJMSExample/build.properties"/>
            <include name="examples/MySimpleKiekerJMSExample/lib/"/>
            <exclude name="examples/MySimpleKiekerJMSExample/lib/*.jar"/>
            <exclude name="examples/MySimpleKiekerJMSExample/**/*.log"/>
            <include name="examples/MySimpleKiekerJMSExample/META-INF/ltwtests-RTsExecutions.aop.xml"/>
            <include name="examples/MySimpleKiekerJMSExample/META-INF/tests.log4j.properties"/>
            <include name="examples/MySimpleKiekerJMSExample/META-INF/kieker.monitoring.properties.example"/>
            <include name="examples/MySimpleKiekerJMSExample/src/**"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.example.myjmsexample}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_myJMSExample_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.example.myjmsexample}.tar.gz" src="${release.dir}/${dist.kieker.example.myjmsexample}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.example.myjmsexample}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.example.myjmsexample}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_myJMSExample_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-example-JPetStoreExample" depends="init">
    <property name="tomcat.dir" value="Tomcat6.0.18WithJpetStore-withInstrumentedJPetStore"/>
    <property name="jpetstore.dir" value="JPetStore-5.0-instrumented"/>
	    <echo message="${dist.dir}/${dist.kieker.example.jpetstore}"/>
        <patternset id="dist_jpetstoreExample_files">
            <include name="examples/JPetStoreExample/README"/>
            <include name="examples/JPetStoreExample/kieker-testdata/**"/>
            <include name="examples/JPetStoreExample/${tomcat.dir}/**"/>
            <include name="examples/JPetStoreExample/${jpetstore.dir}/**"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/devlib/kieker*.jar"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/nbproject/**"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/build/reports/**"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/build/wars/**"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/build/webapp/**"/>
            <exclude name="examples/JPetStoreExample/${jpetstore.dir}/build/work/**"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/bin/catalina.sh.localjvmmem.conf/"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/work/**/*"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/temp/**/*"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/logs/**/*"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/webapps/jpetstore/"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/webapps/kieker*controlServlet*/"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/lib/kieker*.jar"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/lib/aspectj*.jar"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/lib/commons-logging*.jar"/>
            <exclude name="examples/JPetStoreExample/${tomcat.dir}/lib/META-INF/kieker.monitoring.properties"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.example.jpetstore}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_jpetstoreExample_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.example.jpetstore}.tar.gz" src="${release.dir}/${dist.kieker.example.jpetstore}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.example.jpetstore}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.example.jpetstore}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_jpetstoreExample_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-example-microbenchmark" depends="init">
        <property name="microbenchmark.dir" value="OverheadEvaluationMicrobenchmark/"/>
	<echo message="${dist.dir}/${dist.kieker.example.microbenchmark}"/>
        <patternset id="dist_microbenchmarkExample_files">
            <include name="examples/${microbenchmark.dir}/**"/>
            <exclude name="examples/${microbenchmark.dir}/results/**/*"/>
            <exclude name="examples/${microbenchmark.dir}//tmp/**/*"/>
            <exclude name="examples/${microbenchmark.dir}/lib/**/*.jar"/>
        </patternset>

        <tar destfile="${release.dir}/${dist.kieker.example.microbenchmark}.tar" longfile="gnu">
            <tarfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_microbenchmarkExample_files"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${release.dir}/${dist.kieker.example.microbenchmark}.tar.gz" src="${release.dir}/${dist.kieker.example.microbenchmark}.tar" />
     	<!-- tar file no longer needed -->
        <delete file="${release.dir}/${dist.kieker.example.microbenchmark}.tar"/>

        <zip  zipfile="${release.dir}/${dist.kieker.example.microbenchmark}.zip">
            <zipfileset dir="." prefix="${kieker.dist.name}" defaultexcludes="yes">
                <patternset refid="dist_microbenchmarkExample_files"/>
            </zipfileset>
        </zip>
    </target>

    <target name="build-examples" depends="init,build-example-MySimpleKiekerExample,build-example-MySimpleKiekerJMSExample,build-example-JPetStoreExample,build-example-microbenchmark">

    </target>

    <target name="release" depends="build-all,build-kieker.monitoring-sources,build-kieker.monitoring-binaries,build-examples">
        <echo message="Sourceforge release instructions can be found at:"/>
	<echo message="https://sourceforge.net/apps/trac/sourceforge/wiki/Release files for download#Createoreditarelease"/>
	<echo message="scp dist/release/kieker-VERSION_* USER@frs.sourceforge.net:uploads"/>
    </target>

    <target name="clean">
	<!-- <delete dir="tmp"/>-->
        <delete dir="${dist.dir}"/>
        <delete dir="${release.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <delete dir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <delete dir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
    </target>

    <target name="run-test-storage" depends="build-kieker.monitoring-ctrl">
        <echo>
            This is a small test for the part of Tpmon that
            stores monitoring data. Tpmon's monitoring API 
            is manually invoked to collect monitoring data. 
            Therefore, the instrumentation and logic in the
            monitoring points (the aspects) of Tpmon is not
            used. 
            
            The main purpose of this test is to isolate configuration and 
            installation problems and to get Tpmon running.
            
            If in kieker.monitoring.properties file system storage (store in database =
            false) is selected, a new file (tpmon*.dat) with monitoring data
            should be created in the folder specified in kieker.monitoring.properties
            (default: /tmp).
        </echo>
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="kieker.monitoring.core.classpath"
               srcdir="src/kieker/tests/storageOnly/"
               verbose="off"
               debug="true"/>
        <copy file="${tests.log4j.properties}"
	      todir="${build.dir}/"/>
        <java
            dir="."
            fork="true"
            classpathref="run.tests.classpath"
	    classname="kieker.tests.storageOnly.StorageOnly">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <!-- <jvmarg value="-javaagent:../${aspectjweaverjar}"/> -->
            <!-- <jvmarg value="-XX:+PrintGCTimeStamps"/> -->
            <!-- <jvmarg value="-Xloggc:details.out"/> -->
            <!-- <jvmarg value="-verbosegc"/> -->
        </java>
    </target>

    <condition property="no.log4j.properties.tests">
        <not>
            <available file="${tests.log4j.properties}"/>
        </not>
    </condition>

    <target name="init-log4-properties-tests" if="no.log4j.properties.tests">
        <!-- if no aop.xml, copy example file automatically  -->
        <echo message="${no.log4j.properties.tests} not existing.
                       Creating default file."/>
        <copy file="${log4j.properties.example}" tofile="${tests.log4j.properties}"/>
    </target>

    <target name="compile-tests-loadTimeWeaving"
	    depends="build-kieker.monitoring-ltw">
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="kieker.monitoring.core.classpath"
               srcdir="src"
               includes="kieker/tests/loadTimeWeaving/"
               excludes="kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/">
            <!--<exclude name="src/kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/"/>-->
<!--               excludes="kieker/tests/loadTimeWeaving/bookstoreDifferentRecordTypes/**">-->
        </javac>
    </target>

    <target name="compile-tests-loadTimeWeavingDifferentRecordTypes"
	        depends="build-kieker.monitoring-ltw">
        <javac source="1.5" target="1.5"
               destDir="${build.tests.dir}"
               classpathref="kieker.monitoring.core.classpath"
               srcdir="src/kieker/tests/loadTimeWeaving/">
            <classpath> <!-- includes kieker/monitoring/probe/manual -->
                <pathelement location="${dist.dir}/${dist.kieker.monitoring.ltw}"/>
            </classpath>
        </javac>
    </target>
    
    <target name="run-tests-loadTimeWeaving-bookstoreDifferentRecordTypes"
            depends="compile-tests-loadTimeWeavingDifferentRecordTypes">
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests.annotation}"
	      tofile="${build.tests.dir}/META-INF/aop.xml"
              overwrite="true"/>
        <java dir="."
              fork="true"              
              classname="kieker.tests.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.kieker.monitoring.ltw}"/>
            </classpath>
        </java>
    </target>
    
    <target name="run-tests-loadTimeWeaving-bookstoreWithoutAnnotation"
            depends="compile-tests-loadTimeWeaving">
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests.noannotation}"
	      tofile="${build.tests.dir}/META-INF/aop.xml"
              overwrite="true"/>
        <java dir="."
              fork="true"              
              classname="kieker.tests.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.kieker.monitoring.ltw}"/>
            </classpath>
        </java>
    </target>

    <target name="run-tests-loadTimeWeaving-executionOrderTest"
            depends="compile-tests-loadTimeWeaving">
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests.noannotation}"
	      tofile="${build.tests.dir}/META-INF/aop.xml"
              overwrite="true"/>
        <java dir="."
              fork="true"
              classname="kieker.tests.loadTimeWeaving.executionOrderTest.ExecutionOrderTest"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${dist.kieker.monitoring.ltw}"/>
            </classpath>
        </java>
    </target>

    <target name="compile-tests-compileTimeWeaving-bookstore" depends="build-kieker.monitoring-ctw">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/bookstore/aspects/"/>        
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="kieker.monitoring.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/bookstore/"/>
            </sourceroots>
        </iajc>
    </target>

    <target name="compile-tests-compileTimeWeaving-twoConcurrentMethodsExample" depends="build-kieker.monitoring-ctw,init-log4-properties-tests">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/aspects/"/>        
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="kieker.monitoring.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/twoConcurrentMethodsExample/"/>
            </sourceroots>
        </iajc>
    </target>
    
    <target name="compile-tests-compileTimeWeaving-bookstoreDB" depends="build-kieker.monitoring-ctw,compile-tests-compileTimeWeaving-bookstore">
        <javac destDir="${build.tests.dir}"
               source="1.5" target="1.5"
               verbose="off"
               srcdir="src/kieker/tests/util/"
               debug="true"
               classpathref="classpath.libs">
            <compilerarg value="-Xlint:all"/>
        </javac>
    </target>

    <target name="compile-tests-compileTimeWeaving-bookstoreBenchmark" depends="build-kieker.monitoring-ctw">
        <mkdir dir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbe.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/AbstractKiekerTpmonExecutionProbeServlet.java"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="src/kieker/monitoring/probe/aspectJ/executions/${KiekerTpmonTestAspect}"
              todir="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/aspects/"/>
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <iajc  destdir="${build.tests.dir}" source="1.5" target="1.5" verbose="true"
              classpathref="kieker.monitoring.core.classpath">
            <sourceroots>
                <pathelement location="src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/"/>
            </sourceroots>
            <!--<aspectpath>
                <pathelement location="${dist.dir}/${dist.kieker.monitoring.ctw}"/>
            </aspectpath>-->
        </iajc>
    </target>

    <target name="run-tests-compileTimeWeaving-bookstore" depends="compile-tests-compileTimeWeaving-bookstore">
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <target name="run-tests-compileTimeWeaving-bookstoreDB" depends="compile-tests-compileTimeWeaving-bookstoreDB">
        <delete dir="${tests.javadb.kiekerdb.path}"/> <!-- delete existing DB -->
        <java dir="."
              fork="true"
              classpathref="run.tests.classpath"
              classname="kieker.tests.util.JavaDBInitializer">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dkieker.monitoring.dbDriverClassname="/>
            <jvmarg value="-Dkieker.monitoring.dbConnectionAddress=jdbc:derby:${tests.javadb.kiekerdb.path};user=DBUSER;password=DBPASS"/>
            <jvmarg value="-Dkieker.monitoring.dbTableName=APP.tpmondata"/>
        </java>
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.configuration=${tests.db.kieker.monitoring.properties}"/>
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dkieker.monitoring.dbDriverClassname="/>
            <jvmarg value="-Dkieker.monitoring.dbConnectionAddress=jdbc:derby:tmp/KIEKER;user=DBUSER;password=DBPASS"/>
            <jvmarg value="-Dkieker.monitoring.dbTableName=APP.tpmondata"/>
        </java>
    </target>

    <target name="run-tests-compileTimeWeaving-bookstore-synchronized" depends="compile-tests-compileTimeWeaving-bookstore">
        <echo message="Using Bookstore variant with synchronized Catalog.getBooks (is slower)."/>
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstore.synchron.Bookstore"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <target name="run-tests-compileTimeWeaving-twoConcurrentMethodsExample" depends="compile-tests-compileTimeWeaving-twoConcurrentMethodsExample">  
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.twoConcurrentMethodsExample.Starter"
              classpathref="run.tests.classpath">
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
    </target>

    <!--
    <target name="run-benchmark-compileTimeWeaving-bookstore" depends="compile-tests-compileTimeWeaving-bookstoreBenchmark">
        <java dir="."
              fork="true"
              classname="kieker.tests.compileTimeWeaving.bookstoreBenchmark.Bookstore"              
	          classpathref="run.tests.classpath">
            <jvmarg value="-server"/>
            <jvmarg value="-Dkieker.monitoring.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dkieker.monitoring.customStoragePath=${tests.storagepath}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
        </java>
        <exec command="bash -c &quot;echo 'opname resp_ns' &gt; tmp/benchmark-tpmon-cur.dat&quot;" failonerror="true"/>
        <exec command="bash -c &quot;awk -F';' '{ print $2 , ($6-$5) }' tmp/tpmon-*/*.dat | sed s/'kieker.tests.compileTimeWeaving.bookstoreBenchmark.'/''/g >> tmp/benchmark-tpmon-cur.dat&quot;"
        	failonerror="true" />
        <exec command="bash -c &quot;R -vanilla &lt; ./src/kieker/tests/compileTimeWeaving/bookstoreBenchmark/gen-results.r&quot;"/>
        <exec command="okular tmp/benchmark-results.pdf" spawn="true" />
    </target>
    -->
   
    <target name="pmd">
     <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.libs"/>
     <pmd shortFilenames="true">
      <ruleset>rulesets/favorites.xml</ruleset>
      <ruleset>basic</ruleset>
      <formatter type="html" toFile="pmd_report.html" />
      <fileset dir="src/kieker/" includes="**/*.java"/>
     </pmd>
    </target>

    <target name="mvn-init" depends="update-version">
        <xmlproperty file="pom.xml" prefix="pom.xml" />
        <path id="maven-ant-tasks.classpath" path="lib/maven/maven-ant-tasks-2.1.0.jar" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
            classpathref="maven-ant-tasks.classpath" />
    </target>
	
    <target name="mvn-deploy" depends="mvn-init, mvn-deploy-base, mvn-deploy-ctrl, mvn-deploy-ctw, mvn-deploy-ltw" />
	
    <target name="mvn-deploy-ctrl" depends="build-kieker.monitoring-ctrl, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-monitoring-ctrl.xml" />
        <artifact:deploy file="${dist.dir}/${dist.kieker.monitoring.ctrl}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
    
    <target name="mvn-deploy-ctw" depends="build-kieker.monitoring-ctw, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker.monitoring-ctw.xml" />
        <artifact:deploy file="${dist.dir}/${dist.kieker.monitoring.ctw}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
    
    <target name="mvn-deploy-ltw" depends="build-kieker.monitoring-ltw, mvn-deploy-base">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker.monitoring-ltw.xml" />
        <artifact:deploy file="${dist.dir}/${dist.kieker.monitoring.ltw}">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>
	
    <target name="mvn-deploy-base" depends="mvn-init">
      	<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
        <artifact:pom id="mavenproject" file="pom_ant_kieker-base.xml" />
        <artifact:deploy file="pom_ant_kieker-base.xml">
            <pom refid="mavenproject"/>
        </artifact:deploy>
    </target>	
</project>
