This examples demonstrate 
*  How to use Kieker to monitor a simple Java application 
   and how to analyze the data online, i.e., while the 
   application is running. 
   Kieker.Monitoring and Kieker.Analysis communicate via  
   Java Messaging Service (JMS).

All experiments employ AspectJ for weaving the monitoring 
probes into the application. The AspectJ configuration file 
is META-INF/ltwtests-RTsExecutions.aop.xml.
The Java methods to be instrumented are selected using Java 
annotations (here: traces and response times).

Initially, the following steps are required:
1.Download Kieker's *binary* distribution from 
  http://kieker.sourceforge.net.
2.Copy the following files from the binary distribution 
  to the lib/ directory of this example:
  * dist/kieker-common-<version>.jar
  * dist/kieker-analysis-<version>_ctrl.jar
  * dist/kieker-monitoring-<version>_ctrl.jar
  * dist/kieker-monitoring-<version>_ltw.jar
  * lib/aspectjrt-<version>.jar
  * lib/aspectjtools-<version>.jar
  * lib/aspectjweaver-<version>.jar
  * lib/commons-cli-<version>.jar
  * lib/commons-logging-<version>.jar
  * lib/log4j-<version>.jar
3.Copy META-INF/kieker.monitoring.properties.example to 
  META-INF/kieker.monitoring.properties and modify this configuration file
  according to your needs. 
  NOTE: There's no need to change kieker.monitoring.properties to run the 
        example with the default configuration (it is already 
	configured to use the JMS monitoring writer).
4. You should check whether you installed ant (http://ant.apache.org/), 
   since the execution of all examples described in this 
   README is based on the run-targets in the ant file build.xml.
5. Download a OpenJMS install archive (zip or tar.gz) from 
   http://openjms.sourceforge.net and decompress it to the root 
   directory of this example (e.g., $ tar -xzf openjms-<version>.tar.gz)
   
   Now, copy the following files from the OpenJMS lib/ folder to lib/ directory 
   of this example:
   * openjms-<version>.jar
   * openjms-common-<version>.jar
   * openjms-net-<version>.jar
   * jms-<version>.jar
   * concurrent-<version>.jar
   * spice-jndikit-<version>.jar

 SCENARIO:
 
 #####################                                     #######################
 # Bookstore App     #    Kieker         ##############     # Online Monitor     #
 #      with         # -- Monitoring --> # JMS Server #---->#   employing        #
 # Kieker.Monitoring #    Records        ##############     #  Kieker.Analysis   #
 #####################                                     #######################
 
The application is a simple 3-class Java application, referred to 
as "bookstore example". 
The sources can be found in src/mySimpleKiekerJMSExample/bookstoreDifferentRecordTypes60Sek/.
Three methods are instrumented with the annotation @TpmonExecutionMonitoringProbe() contained 
in the Kieker framework and @MyRTProbe() defined in this example archive.

1. First, you need to start the JMS server (you may have to set your JAVA_HOME variable first):
   ($ export JAVA_HOME=PATH-TO-YOUR-JVM)
   $ openjms-0.7.7-beta-1/bin/startup.sh
2. Now, we start the analysis part (in a new terminal):
   $ ant run-JMSMonitor
3. Now, start the instrumented application (in another terminal):
   $ ant run-tests-loadTimeWeaving-bookstore-60Sek
   
The JMSMonitor now prints information on every incoming monitoring recordConsumer
to Stdout.