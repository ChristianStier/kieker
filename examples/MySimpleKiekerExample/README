This examples demonstrate 
1. how to use Kieker.Monitoring to instrument a simple 
   Java application and how to log 
   monitoring data
2. and how to use Kieker.Analysis for 
   analyzing/visualizing the recorded monitoring data

All experiments employ AspectJ for weaving the monitoring 
probes into the application. Two different AspectJ configuration 
files are used for the examples (to be found in META-INF).
The Java methods to be instrumented are selected using Java 
annotations.

Initially, the following steps are required:
1.Download Kieker's *binary* distribution from 
  http://kieker.sourceforge.net.
2.Copy the following files from the binary distribution 
  to the lib/ directory of this example:
  * dist/kieker-common-<version>.jar
  * dist/kieker-analysis-<version>.jar
  * dist/kieker-monitoring-<version>.jar
  * dist/kieker-tools-<version>.jar
  * lib/aspectjrt-<version>.jar
  * lib/aspectjweaver-<version>.jar
  * lib/commons-logging-<version>.jar
3.Copy META-INF/kieker.monitoring.properties.example to 
   META-INF/kieker.monitoring.properties and modify this configuration file
  according to your needs. 
  NOTE: There's no need to change kieker.monitoring.properties to run the 
        example with the default configuration.
4. You should check whether you installed ant (http://ant.apache.org/), 
   since the execution of all examples described in this 
   README is based on the run-targets in the ant file build.xml.
   

SCENARIO 1:
This example generates a filesystem monitoring log containing 
execution and trace data into the directory tmp/tpmon-<DATE-TIME>/.
The application is a simple 3-class Java application, referred to 
as "bookstore example". The sources can be found in 
src/mySimpleKiekerExample/bookstoreTracing/.
Three methods are instrumented with the annotation 
@OperationExecutionMonitoringProbe() contained in the Kieker framework.

1. Execute the ant target run-tests-loadTimeWeaving-bookstore-Tracing
   $ ant run-tests-loadTimeWeaving-bookstore-Tracing
2. The generated monitoring data can be found in tmp/tpmon-<DATE-TIME>/.
   The console output contains the exact directory name.

   The directory contains two files: 
   - tpmon-<DATE-TIME>-Thread-<Y>.dat which contains the monitoring records.
     Despite of the timestamps, the file should look like this:
     $1;1258621800818383199;0;mySimpleKiekerExample.bookstoreTracing.Catalog.getBook(boolean);NULL;4807451864729649153;1258621800816269391;1258621800818365517;pc-vanhoorn;1;1
     $1;1258621800866920181;0;mySimpleKiekerExample.bookstoreTracing.Catalog.getBook(boolean);NULL;4807451864729649153;1258621800846767436;1258621800866898602;pc-vanhoorn;3;2
     $1;1258621800867048415;0;mySimpleKiekerExample.bookstoreTracing.CRM.getOffers();NULL;4807451864729649153;1258621800846723537;1258621800867045091;pc-vanhoorn;2;1
     $1;1258621800867105743;0;mySimpleKiekerExample.bookstoreTracing.Bookstore.searchBook();NULL;4807451864729649153;1258621800805892068;1258621800867059802;pc-vanhoorn;0;0
   - tpmon.dat which contains the mapping between monitoring record type 
     and implementing class:
     $1=kieker.common.record.OperationExecutionRecord

3. We will now use the Kieker.Analysis-based TraceAnalysisTool to generate sequence 
   diagrams and a dependency graph for this monitoring log. Please change to 
   the base directory of Kieker's binary release. The tool can be invoked using 
   the wrapper script bin/trace-analysis.sh (it may be necessary to chmod +x /bin/*.sh).
   A call to bin/trace-analysis.sh lists the available options.

   Additionally, the tools graphviz (www.graphviz.org/) and plotutils 
   (www.gnu.org/software/plotutils/) are required.

   You should create a directory tmp/ for the output files.

 3.1 Dependendy graphs. Kieker allows to generate dependency graphs on
   three abstraction levels: operation, component, container. 
    - The following call generates graphs for all three levels:
      $ bin/trace-analysis.sh -i <FULL-PATH-TO-LOG-DIRECTORY> -p FOO -o tmp/
	--plot-Operation-Dependency-Graph  --plot-Component-Dependency-Graph
	--plot-Container-Dependency-Graph  --short-labels   
   - .dot-files with the prefix 'FOO' containing the diagrams are created in the 
     directory tmp/. 
     The console output gives further instructions how to convert this 
     file to graphic formats like svg and png using graphviz's pic2plot tool.
     (The script bin/dotPic-fileConverter.sh can be used to convert all 
      files contained in a directory to any output format supported by dot.)
 3.2 Sequence diagrams
   - $ bin/trace-analysis -i <FULL-PATH-TO-LOG-DIRECTORY> -p BAR -o tmp/ 
       --plot-Sequence-Diagrams --short-labels
   - For each diagram, a .pic-file with the prefix 'BAR' is created in the directory 
     tmp/. 
     The console output gives further instructions how to convert these 
     files to graphic formats like svg and png using plotutil's pic2plot tool.
     (The script bin/dotPic-fileConverter.sh can be used to convert all 
      files contained in a directory to any output format supported by
      pic2plot.)
 3.3 The directory kieker-testdata/ contains two monitoring logs of this
     scenario and of a slightly extended example with 333 traces (of three
     different trace types)
     
SCENARIO 2:
This examples demonstrates how to use custom monitoring probes and monitoring 
records defined outside the Kieker framework together with Kieker-provided probes 
and records. The sources can be found in src/mySimpleKiekerExample/bookstoreDifferentRecordTypes/.
Three methods are instrumented with the annotation @OperationExecutionMonitoringProbe()
from above as well as @OperationExecutionMonitoringProbe() measuring the response 
times (i.e., durations) of the method executions.
The sources of the annotation, the probe, and the monitoring record can be found 
in src/mySimpleKiekerExample/mySimpleKiekerExample/<annotation/|probe/|monitoringRecord/>.

1. $ ant run-tests-loadTimeWeaving-bookstoreDifferentRecordTypes
2. Again, the generated monitoring data can be found in tmp/tpmon-<DATE-TIME>/.
   Now, both the .dat file and the .map file contain additional entries 
   due to the newly introduced record:
   - The .dat files now additionally contain the respone time measurements:
      $2;1258624662952569355;mySimpleKiekerExample.bookstoreDifferentRecordTypes.Catalog;getBook;2083622
   - The .map file contains the mapping of the identifier to the 
     class implementing the monitoring record type:
      $1=kieker.common.record.OperationExecutionRecord
      $2=mySimpleKiekerExample.monitoringRecord.MyRTMonitoringRecord
   
SCENARIO 3:
This example demonstrates how to implement a response time monitor which 
continuously checks, whether the observed response times are below a 
specified threshold (service level objective).
The sources of the response time monitor based on Kieker.Tpan can be found 
in src/mySimpleKiekerExample/recordConsumer/.

1. We will first generate 30 seconds of monitoring data using a slightly 
   extended bookstore example from Scenario 2 (sources in src/mySimpleKiekerExample/bookstore30SekDelayed).
   $ ant run-tests-loadTimeWeaving-bookstore-LongRun
   
2. Now we use the Kieker-provided relatime-replayer to replay the monitoring 
   data in real-time and the custom response time monitor:
   $ ant run-RTMonitor -DinputDir=tmp/<DATE-TIME>/

  For each incoming record the output of the respone time monitor reports whether 
  the incoming response time record satisfies or violates the service level objective.
