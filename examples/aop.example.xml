<!DOCTYPE aspectj PUBLIC "-//AspectJ//DTD//EN" "http://www.aspectj.org/dtd/aspectj_1_5_0.dtd">

<aspectj>
	<weaver options=""> <!-- options="-verbose -showWeaveInfo -Xjoinpoints:synchronization" -->

		<!-- Use the exclude/include directives to specify which classes are (not) to be considered for weaving.
		     Some examples are given below. -->

		<!-- Use * to consider all classes. In this case, you typically need some additional excludes. -->
		<include within="*"/>

		<!-- The monitoring solution used within in Kieker must not be monitored! -->
		<!-- <exclude within="org.apache.commons.logging..*" />  -->
		<!-- <exclude within="org.slf4j..*" />  -->
		<!-- <exclude within="java.util.logging..*" />  -->
		<!-- <exclude within="org.apache.log4j..*" />  -->

		<!-- instrument the kieker.tests -->
		<!-- <include within="kieker.tests..*" /> -->

		<!-- Example instrumentation for the iBATIS JPetStore -->
		<!-- <include within="com.ibatis.jpetstore..*"/> -->
		<!-- <include within="org.apache.struts.action.ActionServlet" /> -->

		<!-- Example instrumentation for Sun's Java Pet Store -->
		<!-- <include within="com.sun.j2ee.blueprints..*"/> -->
		<!-- <exclude within="java..*,com.sun.corba..*,com.sun.enterprise..*,com.sun.appserv..*"/> -->
		<!-- <exclude within="com.sun.j2ee.blueprints.waf.controller.web.EventMapping,com.sun.j2ee.blueprints.waf.processmanager..*"/> -->

		<!-- Instrumentation of the dacapo eclipse benchmark -->
		<!-- <include within="org.eclipse..*"/> -->

		<!-- include this to enable javac compilation (instead of ajc) of the probes -->
		<!-- <include within="kieker.monitoring.probe.aspectj..*"/> -->
	</weaver>

	<aspects>
		<!-- Use the aspect directives to specify the aspect(s) to use (typically only one). -->

		<!-- KiekerOperationExecution Aspects (State Based Monitoring) -->
		<!-- ################## -->
		
		<!-- This aspect makes sure that all methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectAnnotation"/> -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectAnnotationServlet"/> -->
		<!-- This aspect makes sure that all methods are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectFull"/> -->
		<!-- This aspect makes sure that all methods are instrumented. However, getters (including is.. for booleans) and setters are excluded.  -->
		<aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectFullNoGetterAndSetter"/>
		<!-- <aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectFullServlet"/> -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.operationExecution.OperationExecutionAspectFullNoGetterAndSetterServlet"/> -->
		
		<!-- KiekerFlow Aspects (Event Based Monitoring) -->
		<!-- ################## -->
		
		<!-- Concurrency (Beta Stated) -->
		<!-- This aspect makes sure that the creation of threads are monitored. />
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.concurrency.ThreadingAspect" /> -->
		<!-- This aspect makes sure that synchronizations are monitored. />
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.concurrency.SynchronizedAspect" /> -->
		
		<!-- Construction -->
		<!-- This aspect makes sure that the execution of all constructors are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.construction.FullInstrumentation" /> -->
		<!-- This aspect makes sure that the execution of all constructors annotated with @ConstructionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.construction.Annotation" /> -->

		<!-- ConstructorExecution -->
		<!-- This aspect makes sure that the execution of all constructors are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.constructorExecution.FullInstrumentation" /> -->
		<!-- This aspect makes sure that the execution of all constructors annotated with @ConstructionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.constructorExecution.Annotation" /> -->

		<!-- ConstructorCall -->
		<!-- This aspect makes sure that the call of all constructors are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.constructorCall.FullInstrumentation" /> -->
		<!-- This aspect makes sure that the call of all constructors within methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.constructorCall.Annotation" /> -->
		
		<!-- OperationExecution -->
		<!-- This aspect makes sure that all methods are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecution.FullInstrumentation" /> -->
		<!-- This aspect makes sure that all methods are instrumented. However, getters (including is.. for booleans) and setters are excluded.  -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecution.FullInstrumentationNoGetterAndSetter" /> -->
		<!-- This aspect makes sure that all methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecution.Annotation" /> -->
		
		<!-- OperationExecutionObject -->
		<!-- This aspect makes sure that all methods are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecutionObject.FullInstrumentation" /> -->
		<!-- This aspect makes sure that all methods are instrumented. However, getters (including is.. for booleans) and setters are excluded.  -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecutionObject.FullInstrumentationNoGetterAndSetter" /> -->
		<!-- This aspect makes sure that all methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationExecutionObject.Annotation" /> -->

		<!-- OperationCall -->
		<!-- This aspect makes sure that all methods are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCall.FullInstrumentation" /> -->
		<!-- This aspect makes sure that all methods are instrumented. However, getters (including is.. for booleans) and setters are excluded.  -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCall.FullInstrumentationNoGetterAndSetter" /> -->
		<!-- This aspect makes sure that all methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCall.Annotation" /> -->
		
		<!-- ObjectOperationCall -->
		<!-- This aspect makes sure that all methods are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCallObject.FullInstrumentation" /> -->
		<!-- This aspect makes sure that all methods are instrumented. However, getters (including is.. for booleans) and setters are excluded.  -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCallObject.FullInstrumentationNoGetterAndSetter" /> -->
		<!-- This aspect makes sure that all methods annotated with @OperationExecutionMonitoringProbe are instrumented. -->
		<!-- <aspect name="kieker.monitoring.probe.aspectj.flow.operationCallObject.Annotation" /> -->
		
		<!-- Definition of additional targeted aspects (example for a single additional getter). Use these directives to create additional aspects without the need to actually implement them. -->
		<!--  
		<concrete-aspect name="kieker.monitoring.probe.aspectj.flow.operationExecution.TargetedAspect" extends="kieker.monitoring.probe.aspectj.flow.operationExecution.AbstractAspect">
			<pointcut name="monitoredOperation" expression="execution(int kiekerFlow.TestFlow.getA())" />
		</concrete-aspect>
		-->
		
	</aspects>
</aspectj>
