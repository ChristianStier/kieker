This example demonstrates 
1. how to use Kieker.Monitoring to instrument a Java application 
   running in a Java EE container (session and trace information)
2. how to use Kieker.Analysis for visualizing the recorded monitoring
   data.

All experiments employ AspectJ for weaving the monitoring 
probes into the application. Two different AspectJ configuration 
files are used for the examples (to be found in lib/META-INF/, 
the configuration file used is aop.xml).
The Java methods to be instrumented are selected using Java 
annotations.

Initially, the following steps are required to be performed in the 
directory Tomcat6.0.18WithJpetStore-withInstrumentedJPetStore/lib/:
1. Download Kieker's *binary* distribution from 
   http://kieker.sourceforge.net.
2. Copy the following files from the binary distribution 
   to the lib/ directory:
   * dist/kieker-common-<version>.jar
   * dist/kieker-monitoring-<version>.jar
   * lib/aspectjweaver-<version>.jar

3. Copy lib/META-INF/kieker.monitoring.properties.example to 
   lib/META-INF/kieker.monitoring.properties and modify this configuration file
   according to your needs. 
   NOTE: There's no need to change kieker.monitoring.properties to run the 
         example with the default configuration.
4. Copy the file dist/kieker-monitoring-<version>_controlServlet.war
   from the binary distribution to the webapps/ directory
5. A prepared jpetstore.war file is already located in the 
   webapps/ directory. If you want to rebuild the sources, 
   for example to modify the instrumentation, see Section APPENDIX
   below.

SCENARIO
In this example, the tomcat Java EE Servlet container is started and
some monitoring data is generated employing the Kieker.Monitoring 
instrumentation by manually accessing the JPetStore web application. 
Finally, visualizations (sequence diagrams and a dependency graph) are 
generated from the monitoring data employing Kieker.Analysis.

1. Start the tomcat server using the bin/startup.sh script in the 
   tomcat's bin/ directory (you may have to "chmod +x bin/*.sh" in 
   order to set the executable flags of tomcat's shell scripts).
   You should make sure, that the tomcat started properly, by taking 
   a look at the logs/catalina.out file.
   On error, the file logs/localhost.<date>.log may contain detailed 
   to resolve the issue.
2. Now you can access the JPetStore application by opening the URL
   http://localhost:8080/jpetstore/
   Kieker intialization messages should now appear in logs/catalina.out
   file. The output includes the information where the data is written to
   (should be the temp/tpmon-<DATE-TIME>/ directory).
3. Browse through the application
   The directory contains two files: 
   - tpmon-<DATE-TIME>-Thread-<Y>.dat which contains the monitoring records.
   - tpmon.dat which contains the mapping between monitoring record type 
     and implementing class.
4. Kieker includes a control servlet to check the status of Kieker.Monitoring.
   It can be accessed via: http://localhost:8080/kieker-monitoring-servlet-<version>/
5. We will now use Kieker.Analysis to generate sequence diagrams and dependency 
   graphs for this monitoring log. Please change to the base directory of Kieker's 
   binary release. The tool can be invoked using the wrapper script bin/trace-analysis.sh 
  (it may be necessary to chmod +x /bin/*.sh).  
  A call to bin/trace-analysis.sh lists the available options.

   Additionally, the tools graphviz (www.graphviz.org/) and plotutils 
   (www.gnu.org/software/plotutils/) are required.

   You should create a directory tmp/ for the output files.

 5.1 Dependendy graphs
   - $ bin/trace-analysis.sh -i <FULL-PATH-TO-LOG-DIRECTORY> -p FOO -o tmp/ 
     --plot-Operation-Dependency-Graph --plot-Component-Dependency-Graph
     --plot-Container-Dependency-Graph --short-labels  
   - A .dot-file with the prefix 'FOO' containing the diagram is created in the 
     directory tmp/. 
     Kieker.Analysis's output gives further instructions how to convert this 
     file to graphic formats like svg and png using graphviz's pic2plot tool.
     (The script bin/dotPic-fileConverter.sh can be used to convert all 
      files contained in a directory to any output format supported by dot.)
 5.2 Sequence diagram
   - $ bin/trace-analysis.sh -i <FULL-PATH-TO-LOG-DIRECTORY> -p BAR -o tmp/ 
       --plot-Sequence-Diagrams --short-labels
   - A .pic-file with the prefix 'BAR' containing the diagram is created in the 
     directory tmp/. 
     Kieker.Analysis's output gives further instructions how to convert this 
     file to graphic formats like svg and png using plotutil's pic2plot tool.
    (The script bin/dotPic-fileConverter.sh can be used to convert all 
      files contained in a directory to any output format supported by
      pic2plot.)
 5.3 The directory kieker-testdata/ contains a monitoring log which can also be 
     used as an input directory to generate diagrams.

APPENDIX

In order to rebuild the JPetStore sources (located in JPetStore-5.0-instrumented/), 
the following steps are required:
 - copy the file kieker-monitoring-<version>_ctrl.jar from Kieker's
   binary distribution to the JPetStore's devlib/ directory.
   (includes the Java annotation @TpmonExecutionMonitoringProbe used 
    for the instrumentation)
 - build the JPetStore with build.xml in the build/ directory:
   $ ant
 - you'll find the packaged JPetStore .war-file in build/wars/
 - Copy the file to the webapps/ directory of the tomcat
