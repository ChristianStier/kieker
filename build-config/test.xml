<?xml version="1.0" encoding="UTF-8"?>
<project name="Kieker (test)"  basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    
	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
	
    <target name="run-test-storage" depends="-compile-tests-monitoring" description="Runs a simple storage test">
		<echo>
			This is a small test for the part of Kieker that
			stores monitoring data. Kieker's monitoring API
			is manually invoked to collect monitoring data.
			Therefore, the instrumentation and logic in the
			monitoring points (the aspects) of Kieker is not
			used.

			The main purpose of this test is to isolate configuration and
			installation problems and to get Kieker running.

			If in kieker.monitoring.properties file system storage (store in database =
			false) is selected, a new file (kieker*.dat) with monitoring data
			should be created in the folder specified in kieker.monitoring.properties
			(default: /tmp).
		</echo>

		<path id="kieker.test-storage-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.manualInstrumentation.storageOnly.StorageOnly" classpathref="kieker.test-storage-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>
        
        <target name="run-test-loadTimeWeaving-bookstoreDifferentRecordTypes" depends="-compile-tests-monitoring" description="Runs a load-time weaving test with different record types">
		<path id="kieker.test-loadTimeWeaving-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.annotation}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore" classpathref="kieker.test-loadTimeWeaving-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<!--<jvmarg value="-Dorg.aspectj.weaver.loadtime.configuration=META-INF/aop.xml"/>-->
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreFullInstrumentation" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests with full instrumentation">
		<path id="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA" classpathref="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-executionOrderTest" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests for eoi/ess information">
		<path id="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.executionOrderTest.ExecutionOrderTest" classpathref="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreDifferentRecordTypes-events" depends="-compile-tests-monitoring" description="Runs a load-time weaving test with different record types">
		<path id="kieker.test-loadTimeWeaving-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.annotation}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreDifferentRecordTypes.Bookstore" classpathref="kieker.test-loadTimeWeaving-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<!--<jvmarg value="-Dorg.aspectj.weaver.loadtime.configuration=META-INF/aop.xml"/>-->
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-bookstoreFullInstrumentation-events" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests with full instrumentation">
		<path id="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.bookstoreWithoutAnnotation.BookstoreWA" classpathref="kieker.test-loadTimeWeaving-bookstoreWithoutAnnotation-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>

	<target name="run-test-loadTimeWeaving-executionOrderTest-events" depends="-compile-tests-monitoring" description="Runs a load-time-weaving tests for eoi/ess information">
		<path id="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.aspectj.jar}" />
			</fileset>
		</path>

		<copy file="${aop.xml.ltwtests.flow.full}" tofile="${build.tests.dir}/META-INF/aop.xml" overwrite="true" />
		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.loadTimeWeaving.executionOrderTest.ExecutionOrderTest" classpathref="kieker.test-loadTimeWeaving-executionOrderTest-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
			<jvmarg value="-javaagent:${dist.dir}/${dist.kieker.main.aspectj.jar}" />
			<jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true" />
			<jvmarg value="-Daj.weaving.verbose=true" />
		</java>
	</target>
        
        <target name="run-test-compileTimeWeaving-bookstore" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-bookstore" description="Runs a simple compile-time-weaving test">
		<path id="kieker.test-compileTimeWeaving-bookstore-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.bookstore.Bookstore" classpathref="kieker.test-compileTimeWeaving-bookstore-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="run-test-compileTimeWeaving-bookstore-synchronized" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-bookstore" description="Runs a compile-time-weaving test with a synchronized method">
		<echo message="Using Bookstore variant with synchronized Catalog.getBooks (is slower)." />

		<path id="kieker.test-compileTimeWeaving-bookstore-synchronized-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.bookstore.synchron.Bookstore" classpathref="kieker.test-compileTimeWeaving-bookstore-synchronized-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>

	<target name="run-test-compileTimeWeaving-twoConcurrentMethodsExample" depends="-compile-tests-monitoring,-compile-tests-compileTimeWeaving-twoConcurrentMethodsExample" description="Runs a compile-time-weaving test with concurrency">
		<path id="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="aspectjweaver-*.jar" />
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<java dir="." fork="true" classname="kieker.test.monitoring.aspectj.compileTimeWeaving.twoConcurrentMethodsExample.Starter" classpathref="kieker.test-compileTimeWeaving-twoConcurrentMethodsExample-run-classpath">
			<jvmarg value="-Dkieker.monitoring.configuration=META-INF/kieker.monitoring.test.properties" />
			<jvmarg value="-Dkieker.monitoring.writer=${tests.writer}" />
			<jvmarg value="-D${tests.writer}.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}" />
			<jvmarg value="-D${tests.writer}.customStoragePath=${tests.storagepath}" />
		</java>
	</target>
    
        <target name="run-tests-integration" depends="run-test-compileTimeWeaving-bookstore, run-test-compileTimeWeaving-bookstore-synchronized, run-test-compileTimeWeaving-twoConcurrentMethodsExample, run-test-loadTimeWeaving-bookstoreDifferentRecordTypes, run-test-loadTimeWeaving-bookstoreFullInstrumentation, run-test-loadTimeWeaving-executionOrderTest, run-test-storage" description="Runs the collection of integration tests (takes quite a while)">
	</target>

	<target name="run-tests-junit" depends="compile-tests" description="Runs the JUnit tests">
		<path id="kieker.test-junit-run-classpath">
			<fileset dir="${lib.dir}">
				<include name="hamcrest-core-*.jar" />
				<include name="junit-*.jar" />
				<include name="aspectjweaver-*.jar" /> <!-- needed for the spring tests -->
				<include name="commons-logging-*.jar" /> <!-- needed for the spring tests -->
				<include name="org.eclipse.emf.*.jar" />
				<include name="derby-*.jar" />
				<include name="framework-libs/javax.servlet-*.jar" /> <!-- needed for the cxf, spring? tests -->
				<include name="framework-libs/cxf/*.jar" /> <!-- needed for the cxf tests -->
				<include name="framework-libs/spring/*.jar" /> <!-- needed for the spring tests -->
			</fileset>
			<fileset dir="${example.javaee.jetty.lib.dir}">
				<include name="jetty-*.jar" /> <!-- needed for the cxf, spring tests -->
			</fileset>
			<fileset dir="${example.javaee.jpetstore.lib.dir}">
				<include name="asm-*.jar" /> <!-- needed for the spring tests -->
				<include name="cglib-*.jar" /> <!-- needed for the spring tests -->
			</fileset>
			<pathelement location="${build.tests.dir}/" />
			<fileset dir="${dist.dir}">
				<include name="${dist.kieker.main.jar}" />
			</fileset>
		</path>

		<delete dir="${tests.junit-results.dir}" />
		<mkdir dir="${tests.junit-results.dir}" />

		<junit fork="false" printsummary="yes">
			<classpath refid="kieker.test-junit-run-classpath" />

			<formatter type="xml" />

			<batchtest fork="true" todir="${tests.junit-results.dir}">
				<fileset dir="${build.tests.dir}/">
					<include name="**/junit/**/*Test*.class" />
					<exclude name="**/junit/**/Abstract*.class" />
					<exclude name="**/*$*.class" />
				</fileset>
			</batchtest>
		</junit>

		<antcall target="-test.junit.report" />
	</target>

	<target name="-test.junit.report" depends="" description="Creates the report for the JUnit tests">
		<mkdir dir="${tests.junit-results.dir}/report" />
		<junitreport todir="${tests.junit-results.dir}/report">
			<fileset dir="${tests.junit-results.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${tests.junit-results.dir}/report" />
		</junitreport>

		<echo message="To see the test report, open ${tests.junit-results.dir}/report/index.html in your Web browser." />
	</target>
    
</project>