<?xml version="1.0" encoding="UTF-8"?>
<project name="Kicker (compile)" basedir=".." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property file="build-config/build.properties" />
	
	<import file="init-and-clean.xml"/>
	
	<target name="build-all" depends="clean,-init,build-kicker.main,build-kicker.main.aspectj,build-kicker.main.emf" description="Compiles and packages the Kicker Jar and War files (calls the 'build-kicker-*' targets)">
	</target>

	<!-- Build kicker.common	-->
	<target name="-compile-kicker.common" depends="-init" description="Compiles the sources commonly used by all Kicker components">
		<delete dir="${build.kicker.common.dir}" />
		<mkdir dir="${build.kicker.common.dir}" />
		<javac destDir="${build.kicker.common.dir}" source="1.6" target="1.6" srcdir="${src.kicker.common.dir}" debug="true" classpathref="kicker.common-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kicker.monitoring" depends="-init,-compile-kicker.common" description="Compiles the sources of the Kicker.Monitoring component">
		<delete dir="${build.kicker.monitoring.dir}" />
		<mkdir dir="${build.kicker.monitoring.dir}" />
		<mkdir dir="${build.kicker.monitoring.dir}/META-INF" />
		<javac destDir="${build.kicker.monitoring.dir}" source="1.6" target="1.6" srcdir="${src.kicker.monitoring.dir}" excludes="kicker/monitoring/probe/aspectj/" debug="true" classpathref="kicker.monitoring-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
		<!-- WORKAROUND!!! otherwise the include statement of the aop.xml HAS TO include the aspect.class files -->
		<iajc destdir="${build.kicker.monitoring.dir}" source="1.6" target="1.6" debug="true" XlintFile="build-config/aspectjXlint.properties" classpathref="kicker.monitoring-ajc-compile-classpath" X="joinpoints:synchronization">
			<sourceroots>
				<pathelement location="${src.kicker.monitoring.dir}/kicker/monitoring/probe/aspectj/" />
			</sourceroots>
		</iajc>
		<copy file="${kicker.monitoring.default.properties}" tofile="${build.kicker.monitoring.dir}/META-INF/kicker.monitoring.default.properties" />
		<copy file="${examples.dir}/aop.example.xml" tofile="${build.kicker.monitoring.dir}/META-INF/aop.example.xml" />
	</target>

	<target name="-compile-kicker.analysis.model" depends="-init" description="Compiles the sources of the Analysis Meta-Model">
		<delete dir="${build.kicker.analysis.model.dir}" />
		<mkdir dir="${build.kicker.analysis.model.dir}" />
		<javac destDir="${build.kicker.analysis.model.dir}" source="1.6" target="1.6" srcdir="${src.gen.kicker.analysis.dir}" debug="true" classpathref="kicker.analysis-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kicker.analysis" depends="-init,-compile-kicker.common,-compile-kicker.analysis.model" description="Compiles the sources of the Kicker.Analysis component">
		<delete dir="${build.kicker.analysis.dir}" />
		<mkdir dir="${build.kicker.analysis.dir}" />
		<javac destDir="${build.kicker.analysis.dir}" source="1.6" target="1.6" srcdir="${src.kicker.analysis.dir}" debug="true" classpathref="kicker.analysis-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-kicker.tools" depends="-init,-compile-kicker.common,-compile-kicker.monitoring,-compile-kicker.analysis" description="Compiles the sources of Kicker tools">
		<delete dir="${build.kicker.tools.dir}" />
		<mkdir dir="${build.kicker.tools.dir}" />
		<javac destDir="${build.kicker.tools.dir}" source="1.6" target="1.6" srcdir="${src.kicker.tools.dir}" debug="true" classpathref="kicker.tools-compile-classpath" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
		<copy file="${sequence.pic}" tofile="${build.kicker.tools.dir}/META-INF/sequence.pic" />
	</target>

	<target name="compile-kicker" depends="-init,-compile-kicker.common,-compile-kicker.monitoring,-compile-kicker.analysis,-compile-kicker.tools" description="Compiles the Kicker sources (calls all 'compile-kicker.*' targets)">
	</target>
	
	<target name="-compile-javaee.demo" depends="-init" description="Compiles the sources of the JavaEE example">
			<delete dir="${example.javaee.demo.classes.dir}" />
			<mkdir dir="${example.javaee.demo.classes.dir}" />
			<javac destDir="${example.javaee.demo.classes.dir}" source="1.6" target="1.6" srcdir="${example.javaee.dir}/src" debug="true" classpathref="javaee.demo-compile-classpath" includeAntRuntime="false">
				<compilerarg value="-Xlint:all" />
			</javac>
	</target>

	<target name="build-kicker.main" depends="-init,compile-kicker" description="Compiles and packages the Kicker Jar file">
		<jar destfile="${dist.dir}/${dist.kicker.main.jar}">
			<fileset dir="${build.kicker.common.dir}" />
			<fileset dir="${build.kicker.analysis.dir}" />
			<fileset dir="${build.kicker.analysis.model.dir}" />
			<fileset dir="${build.kicker.monitoring.dir}" />
			<fileset dir="${build.kicker.tools.dir}" />
			<fileset dir="." includes="${license.file}" />
			<manifest>
				<section name="kicker">
					<attribute name="Specification-Title" value="${kicker.name}" />
					<attribute name="Specification-Version" value="${kicker.version}" />
					<attribute name="Specification-Vendor" value="${copyright}" />
					<attribute name="Implementation-Title" value="${kicker.name}" />
					<attribute name="Implementation-Version" value="${kicker.version} (${TODAY})" />
					<attribute name="Implementation-Vendor" value="${copyright}" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="build-kicker.main.aspectj" depends="-init,build-kicker.main" description="Compiles and packages the Kicker Jar file including the aspectweaver">
		<fileset dir="${lib.dir}" id="aspectjweaver-jar-set">
			<include name="aspectjweaver-*.jar" />
		</fileset>
		<pathconvert property="aspectjweaver-jar" refid="aspectjweaver-jar-set" />
		<jar destfile="${dist.dir}/${dist.kicker.main.aspectj.jar}" duplicate="fail" filesetmanifest="merge">
			<zipfileset src="${dist.dir}/${dist.kicker.main.jar}" />
			<zipfileset src="${aspectjweaver-jar}" />
			<fileset dir="${lib.dir}" includes="aspectjweaver-*.LICENSE" />
			<manifest>
				<attribute name="Premain-Class" value="kicker.monitoring.probe.aspectj.AspectJLoader" />
				<attribute name="Can-Redefine-Classes" value="true" />
			</manifest>
		</jar>
	</target>

	<target name="build-kicker.main.emf" depends="-init,build-kicker.main" description="Compiles and packages the Kicker Jar file including the EMF runtime">
		<fileset dir="${lib.dir}" id="org.eclipse.emf.common-jar-set">
			<include name="org.eclipse.emf.common_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.common-jar" refid="org.eclipse.emf.common-jar-set" />
		<fileset dir="${lib.dir}" id="org.eclipse.emf.ecore.xmi-jar-set">
			<include name="org.eclipse.emf.ecore.xmi_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.ecore.xmi-jar" refid="org.eclipse.emf.ecore.xmi-jar-set" />
		<fileset dir="${lib.dir}" id="org.eclipse.emf.ecore-jar-set">
			<include name="org.eclipse.emf.ecore_*.jar" />
		</fileset>
		<pathconvert property="org.eclipse.emf.ecore-jar" refid="org.eclipse.emf.ecore-jar-set" />
		<jar destfile="${dist.dir}/${dist.kicker.main.emf.jar}" duplicate="fail" filesetmanifest="skip">
			<manifest> <!-- would be better to take it from the jar, but somehow doesn't work -->
				<section name="kicker">
					<attribute name="Specification-Title" value="${kicker.name}" />
					<attribute name="Specification-Version" value="${kicker.version}" />
					<attribute name="Specification-Vendor" value="${copyright}" />
					<attribute name="Implementation-Title" value="${kicker.name}" />
					<attribute name="Implementation-Version" value="${kicker.version} (${TODAY})" />
					<attribute name="Implementation-Vendor" value="${copyright}" />
				</section>
			</manifest>
			<zipfileset src="${dist.dir}/${dist.kicker.main.jar}" />
			<zipfileset src="${org.eclipse.emf.common-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.ecore.xmi-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.ecore-jar}">
				<exclude name="META-INF/*.RSA" />
				<exclude name="META-INF/*.SF" />
				<exclude name="META-INF/eclipse.inf" />
				<exclude name="plugin.*" />
				<exclude name="about.*" />
				<exclude name="modeling32.png" />
			</zipfileset>
			<zipfileset src="${org.eclipse.emf.common-jar}" fullpath="org.eclipse.emf.common-about.html" includes="about.html" />
			<zipfileset src="${org.eclipse.emf.ecore.xmi-jar}" fullpath="org.eclipse.emf.ecore.xmi-about.html" includes="about.html" />
			<zipfileset src="${org.eclipse.emf.ecore-jar}" fullpath="org.eclipse.emf.ecore-about.html" includes="about.html" />
			<fileset dir="${lib.dir}" includes="org.eclipse.emf.*.LICENSE" />
		</jar>
	</target>

	<target name="-build-userguide-examples" depends="-init,build-all,clean-userguide-examples" description="Builds all userguide examples">
		<path id="classpath">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
			<fileset dir="${dist.dir}" includes="${dist.kicker.main.jar}" />
		</path>
		<!-- src.userguide.example.bookstore.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.bookstore.dir}">
			<reference refid="classpath" />
			<target name="build-jar" />
		</ant>
		<!-- src.userguide.example.manual.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.manual.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.manual.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
		<!-- src.userguide.example.extended.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.extended.dir}">
			<reference refid="classpath" />
			<target name="-build-jar" />
		</ant>
		<!-- src.userguide.example.aspectj.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.aspectj.dir}">
			<reference refid="classpath" />
			<target name="-build-jar" />
		</ant>
		<!-- src.userguide.example.jms.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.jms.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.jms.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
		<!-- src.userguide.example.sigar.dir -->
		<ant antfile="build.xml" dir="${src.userguide.example.sigar.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-analysis" />
		</ant>
		<ant antfile="build.xml" dir="${src.userguide.example.sigar.dir}">
			<reference refid="classpath" />
			<target name="-build-jar-monitoring" />
		</ant>
	</target>

	<target name="-build-userguide" depends="-init-version" description="Creates the Kicker user guide PDF from the LaTeX sources">
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\version\}\{.*\}" replace="newcommand\{\\\\\\version\}\{${kicker.version}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJar\}\{.*\}" replace="newcommand\{\\\\\\mainJar\}\{${dist.kicker.main.jar}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJarEMF\}\{.*\}" replace="newcommand\{\\\\\\mainJarEMF\}\{${dist.kicker.main.emf.jar.latex}\}" flags="g" />
		<replaceregexp file="${src.userguide.dir}/Macros.tex" match="newcommand\{\\mainJarWeaver\}\{.*\}" replace="newcommand\{\\\\\\mainJarWeaver\}\{${dist.kicker.main.aspectj.jar.latex}\}" flags="g" />
		<exec executable="pdflatex" dir="${src.userguide.dir}" failonerror="false">
			<arg value="kicker-userguide" />
		</exec>
		<exec executable="bibtex" dir="${src.userguide.dir}" failonerror="false">
			<arg value="kicker-userguide" />
		</exec>
		<exec executable="pdflatex" dir="${src.userguide.dir}" failonerror="false">
			<arg value="kicker-userguide" />
		</exec>
		<exec executable="pdflatex" dir="${src.userguide.dir}" failonerror="true">
			<arg value="kicker-userguide" />
		</exec>
		<delete>
				<fileset dir="${src.userguide.dir}" includes="*.aux"/>
				<fileset dir="${src.userguide.dir}" includes="*.bbl"/>
				<fileset dir="${src.userguide.dir}" includes="*.blg"/>
				<fileset dir="${src.userguide.dir}" includes="*.glo"/>
				<fileset dir="${src.userguide.dir}" includes="*.idx"/>
				<fileset dir="${src.userguide.dir}" includes="*.log"/>
				<fileset dir="${src.userguide.dir}" includes="*.toc"/>
				<fileset dir="${src.userguide.dir}" includes="*.snm"/>
				<fileset dir="${src.userguide.dir}" includes="*.out"/>
				<fileset dir="${src.userguide.dir}" includes="*.nav"/>
				<fileset dir="${src.userguide.dir}" includes="*.bak"/>
				<fileset dir="${src.userguide.dir}" includes="*.vrb"/>
				<fileset dir="${src.userguide.dir}" includes="*.backup"/>
			</delete>
	</target>

	<target name="-compile-tests-common" depends="build-kicker.main" description="Compiles the tests for common classes">
		<path id="common-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="hamcrest-core-*.jar" />
				<include name="junit-*.jar" />
			</fileset>
			<!-- This part is necessary as one of the tests uses helper methods from this jar. -->
			<fileset dir="${lib.dir}/framework-libs/cxf">
				<include name="cxf-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kicker.main.jar}" />
			</fileset>
		</path>
		<javac source="1.6" target="1.6" destDir="${build.tests.dir}" classpathref="common-test-compile-classpath" srcdir="${test.kicker.common.dir}" debug="true" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-tests-monitoring" depends="-compile-tests-common,build-kicker.main,build-kicker.main.aspectj" description="Compiles the tests for the Kicker.Monitoring component">
		<path id="monitoring-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="hamcrest-core-*.jar" />
				<include name="junit-*.jar" />
				<include name="framework-libs/spring/*.jar" />
				<include name="framework-libs/cxf/*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kicker.main.jar}" />
			</fileset>
		</path>
		<copy file="${kicker.monitoring.test.properties}" tofile="${build.tests.dir}/META-INF/kicker.monitoring.test.properties" overwrite="true" />
		<javac source="1.6" target="1.6" destDir="${build.tests.dir}" classpathref="monitoring-test-compile-classpath" srcdir="${test.kicker.monitoring.dir}" excludes="kicker/test/monitoring/aspectj/compileTimeWeaving/" debug="true" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-tests-analysis" depends="-compile-tests-common,build-kicker.main,build-kicker.main.emf" description="Compiles the tests for the Kicker.Analysis component">
		<path id="analysis-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="hamcrest-core-*.jar" />
				<include name="junit-*.jar" />
			</fileset>
			<!-- This part is necessary as one of the tests uses helper methods from this jar. -->
			<fileset dir="${lib.dir}/framework-libs/cxf">
				<include name="cxf-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kicker.main.jar}" />
			</fileset>
		</path>
		<javac source="1.6" target="1.6" destDir="${build.tests.dir}" classpathref="analysis-test-compile-classpath" srcdir="${test.kicker.analysis.dir}" debug="true" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="-compile-tests-tools" depends="build-kicker.main" description="Compiles the tests for the Kicker tools">
		<path id="tools-test-compile-classpath">
			<fileset dir="${lib.dir}">
				<include name="hamcrest-core-*.jar" />
				<include name="junit-*.jar" />
				<include name="activemq-core-5.4.3.jar" />
				<include name="reflections-0.9.9-RC1.jar"/>
				<include name="geronimo-j2ee-management_1.1_spec-1.0.1.jar"/>
				<include name="kahadb-5.7.0.jar"/>
				<include name="javax.jms-*.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${dist.kicker.main.jar}" />
			</fileset>
			<!-- This part is necessary for the additional checkstyle checks - to compile them. -->
			<fileset dir="${lib.cs.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<javac source="1.6" target="1.6" destDir="${build.tests.dir}" classpathref="tools-test-compile-classpath" srcdir="${test.kicker.tools.dir}" debug="true" includeAntRuntime="false">
			<compilerarg value="-Xlint:all" />
		</javac>
	</target>

	<target name="compile-tests" depends="-compile-tests-common,-compile-tests-analysis,-compile-tests-monitoring,-compile-tests-tools" description="Compile the tests for the Kicker components">
	</target>

	<!--
	<target name="rebuild-aspectj" description="Corrects the manifest.mf file of the aspectweaver-*.jar">
		<fileset dir="${lib.dir}" id="aspectjweaver-jar-set">
			<include name="aspectjweaver-*.jar" />
		</fileset>
		<pathconvert property="aspectjweaver-jar" refid="aspectjweaver-jar-set" />
		<jar destfile="${dist.dir}/aspectjweaver.jar" duplicate="fail" filesetmanifest="merge">
			<zipfileset src="${aspectjweaver-jar}" />
			<manifest>
				<attribute name="Premain-Class" value="org.aspectj.weaver.loadtime.Agent" />
				<attribute name="Can-Redefine-Classes" value="true" />
			</manifest>
		</jar>
	</target>
	-->
</project>
